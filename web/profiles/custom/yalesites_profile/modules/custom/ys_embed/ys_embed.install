<?php

/**
 * @file
 * Install, uninstall and update hooks for ys_embed module.
 */

use Drupal\Core\File\Exception\FileException;
use Drupal\Core\File\FileSystemInterface;
use Drupal\file\Entity\File;

/**
 * Implements hook_install().
 */
function ys_embed_install() {
  $source = \Drupal::service('extension.list.module')->getPath('ys_embed') . '/images/icons';
  // @todo Debug why the destination can not be loaded dynamically on install.
  // $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  $destination = "public://media-icons/generic";
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  $files = $file_system->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    // When reinstalling the media module we don't want to copy the icons when
    // they already exist. The icons could be replaced (by a contrib module or
    // manually), so we don't want to replace the existing files. Removing the
    // files when we uninstall could also be a problem if the files are
    // referenced somewhere else. Since showing an error that it was not
    // possible to copy the files is also confusing, we silently do nothing.
    if (!file_exists($destination . DIRECTORY_SEPARATOR . $file->filename)) {
      try {
        $file_system->copy($file->uri, $destination, FileSystemInterface::EXISTS_ERROR);
      }
      catch (FileException $e) {
        // Ignore and continue.
      }

    }
  }
}

/**
 * Implements hook_update().
 */
function ys_embed_update_9001() {
  // Copy the soundcloud.png file to the media-icons/generic folder.
  $source = \Drupal::service('extension.list.module')->getPath('ys_embed') . '/images/icons/soundcloud.png';
  $destination = "public://styles/media_library/public/media-icons/generic";
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  // When reinstalling the media module we don't want to copy the icons when
  // they already exist. The icons could be replaced (by a contrib module or
  // manually), so we don't want to replace the existing files. Removing the
  // files when we uninstall could also be a problem if the files are
  // referenced somewhere else. Since showing an error that it was not
  // possible to copy the files is also confusing, we silently do nothing.
  if (!file_exists($destination . DIRECTORY_SEPARATOR . 'soundcloud.png')) {
    try {
      $file_system->copy($source, $destination, FileSystemInterface::EXISTS_ERROR);
    }
    catch (FileException $e) {
      // Ignore and continue.
    }
  }
}

/**
 * Implements hook_update().
 *
 * Updates all twitter social media links to use the x config item.
 */
function ys_embed_update_9002() {
  // Update footer twitter link to use x-twitter.
  $config = \Drupal::configFactory()->getEditable('ys_core.social_links');
  $config->set('x-twitter', $config->get('twitter'));
  $config->clear('twitter');
  $config->save();

  $source = \Drupal::service('extension.list.module')->getPath('ys_embed') . '/images/icons';
  // @todo Debug why the destination can not be loaded dynamically on install.
  // $destination = \Drupal::config('media.settings')->get('icon_base_uri');
  $destination = "public://media-icons/generic";
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  $files = $file_system->scanDirectory($source, '/.*\.(svg|png|jpg|jpeg|gif)$/');
  foreach ($files as $file) {
    // Usually we would check if the file exists, however we want to refresh
    // all of the icons, so we're attempting the copy on all files found.
    try {
      $file_system->copy($file->uri, $destination, FileSystemInterface::EXISTS_REPLACE);
    }
    catch (FileException $e) {
      // Ignore and continue.
    }

  }

  // Update all media that are using twitter.png to use x-twitter.png.
  $config = \Drupal::configFactory()->getEditable('media.settings');
  $icon_base_uri = $config->get('icon_base_uri');

  // Update the file_managed twitter.png file to x-twitter.png.
  $query = \Drupal::entityQuery('file')
    ->accessCheck(FALSE)
    ->condition('filename', 'twitter.png');
  $fids = $query->execute();

  if ($fids) {
    foreach ($fids as $fid) {
      $file = File::load($fid);
      $file->setFilename('x-twitter.png');
      $file->setFileUri($icon_base_uri . '/x-twitter.png');
      $file->save();
    }
  }
}

/**
 * Implements hook_update().
 */
function ys_embed_update_9003() {
  // Copy the localist.png file to the media-icons/generic folder.
  $source = \Drupal::service('extension.list.module')->getPath('ys_embed') . '/images/icons/localist.png';
  $destination = "public://styles/media_library/public/media-icons/generic";
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  $file_system->prepareDirectory($destination, FileSystemInterface::CREATE_DIRECTORY | FileSystemInterface::MODIFY_PERMISSIONS);

  // When reinstalling the media module we don't want to copy the icons when
  // they already exist. The icons could be replaced (by a contrib module or
  // manually), so we don't want to replace the existing files. Removing the
  // files when we uninstall could also be a problem if the files are
  // referenced somewhere else. Since showing an error that it was not
  // possible to copy the files is also confusing, we silently do nothing.
  if (!file_exists($destination . DIRECTORY_SEPARATOR . 'localist.png')) {
    try {
      $file_system->copy($source, $destination, FileSystemInterface::EXISTS_ERROR);
    }
    catch (FileException $e) {
      // Ignore and continue.
    }
  }
}
