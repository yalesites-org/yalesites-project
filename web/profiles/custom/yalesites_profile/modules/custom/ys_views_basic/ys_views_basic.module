<?php

/**
 * @file
 * Contains ys_views_basic.module functions.
 */

use Drupal\node\NodeInterface;
use Drupal\views\Views;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_theme().
 */
function ys_views_basic_theme($existing, $type, $theme, $path): array {
  return [
    // The default formatter will only be used for preview on the back-end.
    'views_basic_formatter_default' => [
      'variables' => [
        'view' => [],
        'exposed' => [],
      ],
    ],
    'views_basic_formatter_preview' => [
      'variables' => [
        'params' => [],
      ],
    ],
    'views_basic_rows' => [
      'variables' => [
        'card_collection_type' => NULL,
        'rows' => [],
        'parentNode' => NULL,
        'contentType' => NULL,
      ],
    ],
    'views_basic_events_calendar' => [
      'variables' => [
        'month_data' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_views_data().
 */
function ys_views_basic_views_data_alter(array &$data) {
  $data['node_field_data']['views_basic_sort'] = [
    'title' => t('Views Basic Sort'),
    'sort' => [
      'help' => t('Creates a dynamic sort from Views Basic fields.'),
      'id' => 'views_basic_sort',
    ],
  ];
  $data['node_field_data']['exclude_taxonomy_terms'] = [
    'title' => t('Exclude Taxonomy Terms'),
    'filter' => [
      'help' => t('Excludes taxonomy terms dynamically from the views tool'),
      'id' => 'exclude_taxonomy_terms',
    ],
  ];
  $data['node_field_data']['event_time_period'] = [
    'title' => t('Event Time Period'),
    'filter' => [
      'help' => t('Show future, past, or all events'),
      'id' => 'event_time_period',
    ],
  ];
  $data['node_field_data']['post_year_filter'] = [
    'title' => t('Year'),
    'filter' => [
      'help' => t('Filter posts by year based on publish date.'),
      'id' => 'post_year_filter',
    ],
  ];

}

/**
 * Implements hook_views_pre_build().
 */
function ys_views_basic_views_pre_build($view) {
  static $counter = 0;

  if (empty($view->dom_id)) {
    $view->dom_id = "view_" . $counter++;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ys_views_basic_views_pre_render(ViewExecutable $view): void {
  $view_id = $view->id();
  if (in_array($view_id, ['views_basic_scaffold', 'views_basic_scaffold_events'])) {
    $pin_options = json_decode($view->args[10]);
    $pin_label = '';
    if ($pin_options->pinned_to_top) {
      $pin_label = $pin_options->pin_label;
    }
    $field_display_options = json_decode($view->args[8]);
    $event_field_display_options = json_decode($view->args[9]);
    // Loop through each row in the view's results and update the node's
    // properties based on show_categories, show_tags and show_thumbnail
    // configuration.
    foreach ($view->result as $row) {
      $row->_entity->show_categories = $field_display_options->show_categories;
      $row->_entity->show_tags = $field_display_options->show_tags;
      $row->_entity->show_thumbnail = $field_display_options->show_thumbnail;
      $row->_entity->hide_add_to_calendar = $event_field_display_options->hide_add_to_calendar;

      $sticky = (bool) $row->_entity->get('sticky')->value;
      if ($sticky) {
        $row->_entity->pin_label = $pin_label;
      }
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function ys_views_basic_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  _ys_views_basic_invalidate_view_nodes_before_render($view, $args);
}

/**
 * Invalidate the nodes about to be ajax rendered on the views basic views.
 *
 * This helps in custom settings such as hiding add to calendar, and others.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view object.
 * @param array $args
 *   The arguments passed to the view.
 *
 * @return void
 *   No return value.
 */
function _ys_views_basic_invalidate_view_nodes_before_render($view, array &$args) {
  // Only target specific views.
  if (!in_array($view->id(), ['views_basic_scaffold', 'views_basic_scaffold_events'])) {
    return;

  }

  // Detect if this is an AJAX request.
  $is_ajax = \Drupal::request()->isXmlHttpRequest();
  if (!$is_ajax) {
    return;
  }

  // Get the next page and items per page.
  $next_page = \Drupal::service('request_stack')->getCurrentRequest()->query->get('page');
  $items_per_page = $view->getItemsPerPage();

  // Create a new instance of the view to fetch the next set of results.
  $view_next = Views::getView($view->id());
  if ($view_next) {
    $view_next->setDisplay($view->current_display);
    $view_next->setItemsPerPage($items_per_page);
    $view_next->setCurrentPage($next_page);
    $view_next->args = $view->args;
    $view_next->exposed_data = $view->exposed_data;
    $view_next->execute();

    // Collect only the node IDs that will appear in the next page.
    $node_ids = [];
    foreach ($view_next->result as $row) {
      if (isset($row->_entity) && $row->_entity instanceof NodeInterface) {
        $node_ids[] = 'node:' . $row->_entity->id();
      }
    }

    // Invalidate cache **only for the nodes appearing on the next page**.
    if (!empty($node_ids)) {
      \Drupal::service('cache_tags.invalidator')->invalidateTags($node_ids);
    }
  }
}
