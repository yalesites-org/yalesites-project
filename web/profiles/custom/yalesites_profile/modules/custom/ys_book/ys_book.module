<?php

/**
 * @file
 * YaleSites Book overrides module.
 *
 * This module overrides default book module text.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_book_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /*
   * Only allow the following content types to be part of a book. This is
   * because the book module permissions tie the `administer book outlines`
   * permission to show this option on node edit forms as well.
   */
  $config = \Drupal::config('book.settings');
  $allowedTypes = $config->get('allowed_types');

  /** @var Drupal\node\NodeForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var Drupal\node\Entity\Node $node */
  $node = $form_object->getEntity();

  if (!in_array($node->getType(), $allowedTypes)) {
    $form['book'] = [
      '#access' => FALSE,
    ];
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ys_book_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'help') {
    unset($implementations['book']);
  }
}

/**
 * Implements hook_help().
 */
function ys_book_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case 'book.admin':
      return '<p>' . t('Content Collections provide a way to create secondary navigation on your webpage. When you organize content into Collections, they become navigation sections. Your content can appear in both the main navigation and Content Collections') . '</p>';

    case 'entity.node.book_outline_form':
      return '<p>' . t('The outline feature allows you to include pages in the <a href=":book">Collection hierarchy</a>, as well as move them within the hierarchy or to <a href=":book-admin">reorder an entire collection</a>.',
        [
          ':book' => Url::fromRoute('book.render')->toString(),
          ':book-admin' => Url::fromRoute('book.admin')->toString(),
        ]) . '</p>';
  }
}

/**
 * Implements hook_form_alter().
 */
function ys_book_form_alter(&$form, &$form_state, $form_id) {
  $nodeFormIds = [
    'node_page_form',
    'node_page_edit_form',
  ];

  if (!in_array($form_id, $nodeFormIds)) {
    return;
  }

  $form['book']['#title'] = t('Content Collection');
  $form['book']['bid']['#title'] = t('Collection');
  $form['book']['bid']['#description'] = t('Your page will be a part of the selected collection');
  $form['book']['help_text'] = [
    '#type' => 'markup',
    '#markup' => t('Content Collections provide a way to create secondary navigation on your webpage. When you organize content into Collections, they become navigation sections. Your content can appear in both the main navigation and Content Collections'),
    '#weight' => -10,
  ];
}

/**
 * Implements hook_form_FORM_ID_alter() for book_admin_edit.
 */
function ys_book_form_book_admin_edit_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add required indicator to all title fields in the book admin table.
  if (isset($form['table'])) {
    foreach (Element::children($form['table']) as $key) {
      if (isset($form['table'][$key]['title'])) {
        $form['table'][$key]['title']['#required'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function ys_book_menu_links_discovered_alter(&$links) {
  // Target the menu item with the route 'book.admin'.
  if (isset($links['book.admin'])) {
    $links['book.admin']['title'] = t('Content Collections');
  }
}

/**
 * Implements hook_library_info_alter().
 */
function ys_book_library_info_alter(&$libraries, $extension) {
  // Replaces the book module JS with one from YS Core to change wording.
  if ($extension == 'book') {
    $new_path = '/' . \Drupal::service('extension.list.module')->getPath('ys_book') . '/js';
    $new_js = [];
    $replacements = [
      'book.js' => $new_path . '/book.js',
    ];
    foreach ($libraries['drupal.book']['js'] as $source => $options) {
      if (isset($replacements[$source])) {
        $new_js[$replacements[$source]] = $options;
      }
      else {
        $new_js[$source] = $options;
      }
    }
    $libraries['drupal.book']['js'] = $new_js;

  }
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 * 
 * Fallback approach: if service override fails, manually add CAS pages here.
 */
function ys_book_preprocess_block(&$variables) {
  if (isset($variables['plugin_id']) && $variables['plugin_id'] === 'custom_book_navigation') {
    // Check if we have missing CAS pages that should be included
    if (isset($variables['content']['#book_id'])) {
      $book_id = $variables['content']['#book_id'];
      ys_book_ensure_cas_pages_included($variables['content'], $book_id);
    }
  }
}

/**
 * Ensures CAS-protected pages are included in book navigation.
 */
function ys_book_ensure_cas_pages_included(&$content, $book_id) {
  // Get all book pages from database (including CAS-protected ones)
  $query = \Drupal::database()->select('book', 'b')
    ->fields('b', ['nid'])
    ->condition('bid', $book_id)
    ->orderBy('p1')
    ->orderBy('p2')
    ->orderBy('p3')
    ->orderBy('p4');
  
  $all_book_nids = $query->execute()->fetchCol();
  
  // Get currently displayed NIDs
  $displayed_nids = [];
  if (isset($content['#items'])) {
    ys_book_collect_displayed_nids($content['#items'], $displayed_nids);
  }
  
  $missing_nids = array_diff($all_book_nids, $displayed_nids);
  
  if (!empty($missing_nids)) {
    // Log missing pages for debugging
    \Drupal::logger('ys_book')->notice('Found @count missing book pages, attempting to add them: @nids', [
      '@count' => count($missing_nids),
      '@nids' => implode(', ', $missing_nids),
    ]);
    
    // Add missing pages to the navigation structure
    // This is complex, so for now just log the issue
    // TODO: Implement full tree reconstruction if needed
  }
}

/**
 * Recursively collects all displayed node IDs from book navigation items.
 */
function ys_book_collect_displayed_nids($items, &$nids) {
  foreach ($items as $nid => $item) {
    $nids[] = $nid;
    if (!empty($item['below'])) {
      ys_book_collect_displayed_nids($item['below'], $nids);
    }
  }
}
