<?php

/**
 * @file
 * Contains ys_core.module functions.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\menu_item_extras\Entity\MenuItemExtrasMenuLinkContent;

/**
 * @file
 * Contains ys_core.module functions.
 */

/**
 * Add template file for social links.
 *
 * Implements hook_theme().
 */
function ys_core_theme($existing, $type, $theme, $path): array {
  return [
    'ys_breadcrumb_block' => [
      'variables' => [
        'items' => [],
      ],
    ],
    'ys_dashboard' => [
      'variables' => [],
    ],
    'ys_social_links' => [
      'variables' => [
        'icons' => [],
      ],
    ],
    'ys_search_form' => [
      'variables' => [],
    ],
    'ys_title_breadcrumb' => [
      'variables' => [
        'page_title' => NULL,
        'page_title_display' => NULL,
        'breadcrumbs_placeholder' => [],
      ],
    ],
    'ys_footer_block' => [
      'variables' => [
        'footer_variation' => 'basic',
        'footer_logos' => [],
        'school_logo' => NULL,
        'school_logo_url' => '/',
        'footer_text' => NULL,
        'footer_links_col_1_heading' => NULL,
        'footer_links_col_2_heading' => NULL,
        'footer_links_col_1' => [],
        'footer_links_col_2' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function ys_core_form_alter(&$form, $form_state, $form_id) {

  // Ensure the CAS bulk add only allows roles that role_delegate will allow.
  if ($form_id == 'bulk_add_cas_users') {
    $account = \Drupal::currentUser();
    $delegatable_roles = \Drupal::service('delegatable_roles');

    $delegatable_roles = $delegatable_roles->getAssignableRoles($account);
    $form['roles']['#options'] = $delegatable_roles;
  }

  // Load custom library.
  if (str_ends_with($form_id, '_layout_builder_form')) {
    $form['#attached']['library'][] = 'ys_core/node_layout_form';
  }

  // Changes wording of sticky at top of lists.
  if (isset($form['sticky'])) {
    $form['sticky']['widget']['value']['#title'] = t('Pin to the beginning of list');
  }

  // Hide Relations on taxonomy term edit page.
  $vocabularyForms = [
    'taxonomy_term_tags_form',
    'taxonomy_term_event_category_form',
    'taxonomy_term_post_category_form',
  ];

  if (in_array($form_id, $vocabularyForms)) {
    $form['relations']['#access'] = FALSE;
  }

  // Increase length of taxonomy vocabulary description field.
  if ($form_id == 'taxonomy_vocabulary_form') {
    $form['description']['#maxlength'] = 256;
  }

  // Hide core taxonomy description.
  // @see ys_core_help()
  if ($form_id == 'taxonomy_overview_vocabularies') {
    $form['#attached']['library'][] = 'ys_core/taxonomy_form';
  }

  // Add vocabulary description to the taxonomy overview form.
  if ($form_id == 'taxonomy_overview_terms') {
    $replacements['@description'] = $form_state->getBuildInfo()['args'][0]->getDescription();
    $form['help']['description'] = [
      '#type' => 'markup',
      '#markup' => "<p>" . t('@description', $replacements) . "</p>",
    ];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ys_core_preprocess_block(&$variables) {
  $config = \Drupal::config('ys_core.social_links');

  // Add the cache tag, so that the theme setting information is rebuilt
  // when the config is saved.
  // Via: https://drupal.stackexchange.com/questions/266379/how-to-clear-cache-for-config-entity-after-making-changes
  \Drupal::service('renderer')->addCacheableDependency($variables, $config);
}

/**
 * Passes the config to enable/disable search form into templates.
 *
 * Implements hook_preprocess_region().
 */
function ys_core_preprocess_region(&$variables) {
  $config = \Drupal::config('ys_core.header_settings');
  if ($variables['elements']['#region'] == 'header') {
    $variables['utility_nav__search'] = ($config->get('search')) ? $config->get('search')['enable_search_form'] : NULL;

    // Responsive image render array for focus header image.
    if ($focusHeaderImageId = $config->get('focus_header_image')) {
      $focusHeaderImageMedia = \Drupal::service('entity_type.manager')->getStorage('media')->load($focusHeaderImageId);
      $fileEntity = \Drupal::service('entity_type.manager')->getStorage('file');
      $focusHeaderImageFileUri = $fileEntity->load($focusHeaderImageMedia->field_media_image->target_id)->getFileUri();
      $focusHeaderImageRender = [
        '#type' => 'responsive_image',
        '#responsive_image_style_id' => 'background_image_focus_header',
        '#uri' => $focusHeaderImageFileUri,
        '#attributes' => [
          'alt' => $focusHeaderImageMedia->get('field_media_image')->first()->get('alt')->getValue(),
        ],
      ];

      $path = \Drupal::service('path.current')->getPath();
      $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
      $frontPage = \Drupal::config('system.site')->get('page.front');

      // See if the path is the front page.
      $isFrontPage = ($alias == $frontPage || $path == $frontPage || \Drupal::service('path.matcher')->isFrontPage());
      $variables['site_header__background_image'] = $isFrontPage ? $focusHeaderImageRender : FALSE;
    }

  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'ys_core_user_login_form_submit';
}

/**
 * Custom submit handler for the login form.
 */
function ys_core_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements theme_preprocess_menu().
 */
function ys_core_preprocess_menu(&$variables) {
  if ($variables['menu_name'] == 'main') {
    // If submenu, add the top level link as the first link in the submenu.
    foreach ($variables['items'] as &$menuItem) {
      // Skip menu items that do not have subitems.
      if (empty($menuItem['below'])) {
        continue;
      }

      // Clone top level menu item.
      $clonedMenuItem = $menuItem;

      // We don't want any other subitems, just the top level.
      $clonedMenuItem['below'] = NULL;

      // Main menu items get the heading treatment.
      // @see component-library-twig/components/02-molecules/menu/_yds-menu-item.twig
      $clonedMenuItem['list__item__is_heading'] = TRUE;

      // Get the CTA text from menu item extras field.
      $clonedMenuItem['heading_cta'] = $clonedMenuItem['entity']->get('field_menu_top_level_link_cta')->value ?: t('Explore @title', ['@title' => $clonedMenuItem['title']]);

      // Add cloned item to the beginning of the menu.
      array_unshift($menuItem['below'], $clonedMenuItem);

    }
  }

}

/**
 * Implements hook_module_implements_alter().
 */
function ys_core_module_implements_alter(&$implementations, $hook) {
  // Forces ys_core help hook to come before others.
  // @see https://drupal.stackexchange.com/questions/242572/is-it-possible-to-modify-help-text-on-a-vocabulary-page
  if ($hook == 'help') {
    $implementations = ['ys_core' => $implementations['ys_core']] + $implementations;
  }
}

/**
 * Implements hook_help().
 */
function ys_core_help($route_name, RouteMatchInterface $route_match) {
  // Overrides help description.
  // This is "temporary" until core adds this functionality.
  // Uses CSS to hide the core description.
  // @see https://drupal.stackexchange.com/questions/242572/is-it-possible-to-modify-help-text-on-a-vocabulary-page
  // @see https://www.drupal.org/project/drupal/issues/487386
  switch ($route_name) {
    case 'entity.taxonomy_vocabulary.collection':

      $output = '<p class="replacement-taxonomy-help">' . t('Taxonomy is used to classify website content into groups called vocabularies. Each vocabulary contains a set of terms used to categorize content. For example, an "Event Type" vocabulary contains terms like "Online" and "In-Person". This allows for easy categorization and organization of content on a website.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function ys_core_page_attachments(array &$page) {
  // Add Siteimprove Javascript only on production.
  $config = \Drupal::config('config_split.config_split.production_config');
  if ($config->get('status')) {
    $page['#attached']['library'][] = 'ys_core/siteimprove';
  }

  // Custom or fallback favicons.
  $favicons = \Drupal::service('ys_core.media_manager')->getFavicons();
  foreach ($favicons as $name => $favicon) {
    $page['#attached']['html_head'][] = [$favicon, $name];
  }

}

/**
 * Implements hook_preprocess_image_widget() for SiteSettingsForm.php.
 */
function ys_core_preprocess_image_widget(&$variables) {
  /*
   * Used for previewing the managed file for favicons and others.
   * @see web/profiles/custom/yalesites_profile/modules/custom/ys_core/src/Form/SiteSettingsForm.php
   * @see
   * https://drupal.stackexchange.com/questions/212480/form-api-image-preview
   */
  $element = $variables['element'];

  if (isset($element['#use_preview'])) {

    $variables['attributes'] = [
      'class' => [
        'image-widget',
        'js-form-managed-file',
        'form-managed-file',
        'clearfix',
      ],
    ];

    $config = \Drupal::config('system.site');
    $variables['site_name'] = $config->get('name');

    if (!empty($element['fids']['#value'])) {
      $file = reset($element['#files']);
      $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
      $file_variables = [
        'style_name' => $element['#preview_image_style'],
        'uri' => $file->getFileUri(),
      ];

      // Determine image dimensions.
      if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
        $file_variables['width'] = $element['#value']['width'];
        $file_variables['height'] = $element['#value']['height'];
      }
      else {
        $image = \Drupal::service('image.factory')->get($file->getFileUri());
        if ($image->isValid()) {
          $file_variables['width'] = $image->getWidth();
          $file_variables['height'] = $image->getHeight();
        }
        else {
          $file_variables['width'] = $file_variables['height'] = NULL;
        }
      }

      $element['preview'] = [
        '#weight' => -10,
        '#theme' => 'image_style',
        '#width' => $file_variables['width'],
        '#height' => $file_variables['height'],
        '#style_name' => $file_variables['style_name'],
        '#uri' => $file_variables['uri'],
      ];

      // Store the dimensions in the form so the file doesn't have to be
      // accessed again. This is important for remote files.
      $element['width'] = [
        '#type' => 'hidden',
        '#value' => $file_variables['width'],
      ];
      $element['height'] = [
        '#type' => 'hidden',
        '#value' => $file_variables['height'],
      ];
    }
    else {
      $variables['fallback_image'] = TRUE;
    }

    // Sets a twig variable to use the favicon preview.
    // @see web/themes/custom/ys_admin_theme/templates/content-edit/image-widget.html.twig
    $variables['use_favicon_preview'] = $element['#use_favicon_preview'] ?? NULL;
    $variables['use_svg_preview'] = $element['#use_svg_preview'] ?? NULL;

    $variables['data'] = [];
    foreach (Element::children($element) as $child) {
      $variables['data'][$child] = $element[$child];
    }
  }
}

/**
 * Implements hook_ENTITY_update().
 *
 * Clears the cache for rendered items on taxonomy term update.
 */
function ys_core_taxonomy_term_update() {
  Cache::invalidateTags(['rendered']);
}

/**
 * The following functions add menu item extras fields to node add/edit forms.
 *
 * @see https://www.drupal.org/project/menu_item_extras/issues/2992096#comment-14140361
 */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_node_page_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ys_core_page_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_node_page_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  ys_core_page_form_alter($form, $form_state);
}

/**
 * Alters the page node forms.
 *
 * @var array $form
 *  The form array.
 * @var Drupal\Core\Form\FormStateInterface $form_state
 *  The current form state.
 */
function ys_core_page_form_alter(&$form, FormStateInterface $form_state) {

  // Add menu link fields to node form.
  if ($link = _ys_core_get_link($form_state)) {
    $form_display = EntityFormDisplay::load('menu_link_content.' . $link->getMenuName() . '.default');
    assert($form_display instanceof EntityFormDisplay);
    $form['menu']['link']['extra'] = [
      '#type' => 'container',
      '#parents' => ['menu', 'extra'],
    ];
    $form_display->buildForm($link, $form['menu']['link']['extra'], $form_state);
    // Only keep custom fields, other properties already are in the form.
    foreach (Element::children($form['menu']['link']['extra']) as $key) {
      if (strpos($key, 'field_') !== 0) {
        unset($form['menu']['link']['extra'][$key]);
      }
    }

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'ys_core_save_menu_link_fields';
      }
    }
  }
}

/**
 * Saves the menu item extras when on the node add/edit pages.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function ys_core_save_menu_link_fields(array $form, FormStateInterface $form_state) {
  if ($link = _ys_core_get_link($form_state)) {
    // Only save the menu item extras if there is a menu link with a route.
    if ($link->getUrlObject()->getRouteName()) {
      $form_display = EntityFormDisplay::load('menu_link_content.' . $link->getMenuName() . '.default');
      if ($form_display instanceof EntityFormDisplay) {
        $form_display->extractFormValues($link, $form['menu']['link']['extra'], $form_state);
        $link->save();
      }
    }
  }
}

/**
 * Gets any menu item extras content.
 *
 * @return Drupal\menu_item_extras\Entity\MenuItemExtrasMenuLinkContent
 *   Menu item extras content.
 */
function _ys_core_get_link(FormStateInterface $form_state) {
  /** @var Drupal\node\Entity $form_state */
  $node = $form_state->getFormObject()->getEntity();
  $defaults = menu_ui_get_menu_link_defaults($node);
  if ($mlid = $defaults['entity_id']) {
    return MenuItemExtrasMenuLinkContent::load($mlid);
  }
  return MenuItemExtrasMenuLinkContent::create($defaults);
}

/**
 * End allow menu item extras fields to be included on node add and edit forms.
 */

/**
 * Implements hook_preprocess_page().
 */
function ys_core_preprocess_page(&$variables) {
  // Add the cache tag, so that the theme setting information is rebuilt
  // when the config is saved.
  // Via: https://drupal.stackexchange.com/questions/266379/how-to-clear-cache-for-config-entity-after-making-changes
  $config = \Drupal::config('ys_core.header_settings');
  \Drupal::service('renderer')->addCacheableDependency($variables, $config);
}
