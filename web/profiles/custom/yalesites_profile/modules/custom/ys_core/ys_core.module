<?php

/**
 * @file
 * Contains ys_core.module functions.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\ys_core\NodeAccessHelpBlockOverride;

/**
 * @file
 * Contains ys_core.module functions.
 */

/**
 * Add template file for social links.
 *
 * Implements hook_theme().
 */
function ys_core_theme($existing, $type, $theme, $path): array {
  return [
    'ys_breadcrumb_block' => [
      'variables' => [
        'items' => [],
      ],
    ],
    'ys_support_form' => [
      'variables' => [
        'link' => NULL,
      ],
    ],
    'ys_dashboard' => [
      'variables' => [],
    ],
    'ys_dashboard_resources' => [
      'variables' => [],
    ],
    'ys_social_links' => [
      'variables' => [
        'icons' => [],
      ],
    ],
    'ys_search_form' => [
      'variables' => [],
    ],
  ];
}

/**
 * Changes wording of sticky at top of lists.
 *
 * Implements hook_form_alter().
 */
function ys_core_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['sticky'])) {
    $form['sticky']['widget']['value']['#title'] = t('Pin to the beginning of list');
  }
  // Override the submit button for the nodeaccess form submit for clarity.
  if ($form_id == 'nodeaccess_grants_form') {
    $form['submit']['#value'] = t('Save Visibility');
  }
}

/**
 * Passes the config to enable/disable search form into templates.
 *
 * Implements hook_preprocess_region().
 */
function ys_core_preprocess_region(&$variables) {
  $config = \Drupal::config('ys_core.site');
  if ($variables['elements']['#region'] == 'header' && $config->get('search')) {
    $variables['utility_nav__search'] = $config->get('search')['enable_search_form'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'ys_core_user_login_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_layout_paragraphs_component_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add instructions to the top of paragraph forms.
  if (!empty($form['#paragraph']) && !empty($instructions = $form['#paragraph']->getParagraphType()->getDescription())) {
    $form['instructions'] = [
      '#prefix' => '<p>',
      '#markup' => $instructions,
      '#suffix' => '</p>',
      '#weight' => -300,
    ];
  }
}

/**
 * Custom submit handler for the login form.
 */
function ys_core_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_page_preprocess_menu__main().
 */
function ys_core_preprocess_menu__main(&$variables) {
  // If submenu, add the top level link as the first link in the submenu.
  foreach ($variables['items'] as &$menuItem) {
    // Skip menu items that do not have subitems.
    if (empty($menuItem['below'])) {
      continue;
    }

    // Clone top level menu item.
    $clonedMenuItem = $menuItem;

    // We don't want any other subitems, just the top level.
    $clonedMenuItem['below'] = NULL;

    // If a node, use the node title instead of link title.
    $routeParams = $clonedMenuItem['original_link']->getRouteParameters();
    if (!empty($routeParams['node'])) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($routeParams['node']);
      $clonedMenuItem['title'] = $node->getTitle();
    }

    // Add cloned item to the beginning of the menu.
    array_unshift($menuItem['below'], $clonedMenuItem);

  }
}

/**
 * Implements hook_local_tasks_alter().
 */
function ys_core_local_tasks_alter(&$local_tasks) {
  // Change default title from "Grants" as that can be confusing to editors.
  if ($local_tasks['entity.node.grantform']) {
    $local_tasks['entity.node.grantform']['title'] = t('Visibility');
  }
}

/**
 * Implements hook_block_view_alter().
 */
function ys_core_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  // Override help text on nodeaccess form.
  if ($block->getBaseId() === 'help_block' && \Drupal::routeMatch()->getRouteName() === 'entity.node.grants') {
    $build['#pre_render'][] = [NodeAccessHelpBlockOverride::class, 'preRender'];
  }
}
