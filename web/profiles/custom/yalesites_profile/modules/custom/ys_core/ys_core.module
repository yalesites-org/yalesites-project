<?php

/**
 * @file
 * Contains ys_core.module functions.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * @file
 * Contains ys_core.module functions.
 */

/**
 * Add template file for social links.
 *
 * Implements hook_theme().
 */
function ys_core_theme($existing, $type, $theme, $path): array {
  return [
    'ys_breadcrumb_block' => [
      'variables' => [
        'items' => [],
      ],
    ],
    'ys_support_form' => [
      'variables' => [
        'link' => NULL,
      ],
    ],
    'ys_dashboard' => [
      'variables' => [],
    ],
    'ys_dashboard_resources' => [
      'variables' => [],
    ],
    'ys_social_links' => [
      'variables' => [
        'icons' => [],
      ],
    ],
    'ys_search_form' => [
      'variables' => [],
    ],
  ];
}

/**
 * Changes wording of sticky at top of lists.
 *
 * Implements hook_form_alter().
 */
function ys_core_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['sticky'])) {
    $form['sticky']['widget']['value']['#title'] = t('Pin to the beginning of list');
  }

  // Form ID's of forms to add Javascript interaction.
  // @todo pull this list programatically.
  $nodeForms = [
    'node_page_form',
    'node_page_edit_form',
    'node_event_form',
    'node_event_edit_form',
    'node_news_form',
    'node_news_edit_form',
    'node_profile_form',
    'node_profile_edit_form',
  ];

  if (in_array($form_id, $nodeForms)) {
    $form['#attached']['library'][] = 'ys_core/node_edit_form';
    unset($form['field_content']['widget']['#title']);
  }
}

/**
 * Passes the config to enable/disable search form into templates.
 *
 * Implements hook_preprocess_region().
 */
function ys_core_preprocess_region(&$variables) {
  $config = \Drupal::config('ys_core.site');
  if ($variables['elements']['#region'] == 'header' && $config->get('search')) {
    $variables['utility_nav__search'] = $config->get('search')['enable_search_form'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'ys_core_user_login_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_layout_paragraphs_component_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add instructions to the top of paragraph forms.
  if (!empty($form['#paragraph']) && !empty($instructions = $form['#paragraph']->getParagraphType()->getDescription())) {
    $form['instructions'] = [
      '#prefix' => '<p>',
      '#markup' => $instructions,
      '#suffix' => '</p>',
      '#weight' => -300,
    ];
  }
}

/**
 * Custom submit handler for the login form.
 */
function ys_core_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_page_preprocess_menu__main().
 */
function ys_core_preprocess_menu__main(&$variables) {
  // If submenu, add the top level link as the first link in the submenu.
  foreach ($variables['items'] as &$menuItem) {
    // Skip menu items that do not have subitems.
    if (empty($menuItem['below'])) {
      continue;
    }

    // Clone top level menu item.
    $clonedMenuItem = $menuItem;

    // We don't want any other subitems, just the top level.
    $clonedMenuItem['below'] = NULL;

    // If a node, use the node title instead of link title.
    $routeParams = $clonedMenuItem['original_link']->getRouteParameters();
    if (!empty($routeParams['node'])) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($routeParams['node']);
      $clonedMenuItem['title'] = $node->getTitle();
    }

    // Add cloned item to the beginning of the menu.
    array_unshift($menuItem['below'], $clonedMenuItem);

  }
}

/**
 * Implements hook_toolbar_alter().
 */
function ys_core_toolbar_alter(&$items) {
  // Alter the label of the "Local Tasks" link created by the Gin Toolbar.
  if (!empty($items['admin_toolbar_local_tasks']['tab']['#title'])) {
    // Change to "Manage This Page" as "Local Tasks" is not easy to understand.
    $items['admin_toolbar_local_tasks']['tab']['#title'] = 'Manage This Page';
  }
}
