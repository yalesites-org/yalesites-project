<?php

/**
 * @file
 * Contains ys_core.module functions.
 */

use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Routing\RouteObjectInterface;
use Drupal\Core\Session\AccountProxy;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\Component\Utility\NestedArray;

// Include coffee commands.
require_once __DIR__ . '/ys_core.coffee.inc';

/**
 * @file
 * Contains ys_core.module functions.
 */

/**
 * Add template file for social links.
 *
 * Implements hook_theme().
 */
function ys_core_theme($existing, $type, $theme, $path): array {
  return [
    'ys_breadcrumb_block' => [
      'variables' => [
        'items' => [],
        'always_show_breadcrumbs' => FALSE,
      ],
    ],
    'ys_dashboard' => [
      'variables' => [],
    ],
    'ys_social_links' => [
      'variables' => [
        'icons' => [],
      ],
    ],
    'ys_search_form' => [
      'variables' => [
        'show_content_type_filter' => NULL,
        'content_type_list' => [],
      ],
    ],
    'ys_title_breadcrumb' => [
      'variables' => [
        'page_title' => NULL,
        'page_title_display' => NULL,
        'breadcrumbs_placeholder' => [],
      ],
    ],
    'ys_footer_block' => [
      'variables' => [
        'footer_variation' => 'basic',
        'footer_logos' => [],
        'school_logo' => NULL,
        'school_logo_url' => '/',
        'footer_text' => NULL,
        'footer_links_col_1_heading' => NULL,
        'footer_links_col_2_heading' => NULL,
        'footer_links_col_1' => [],
        'footer_links_col_2' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_form_alter().
 */
function ys_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'layout_builder_update_block' || $form_id === 'layout_builder_add_block') {
    $block_type = ys_core_get_block_type($form, $form_state);

    if ($block_type === 'grand_hero') {

      // Get the block entity.
      $block = $form['settings']['block_form']['#block'];

      // Handle field_overlay_png.
      if ($block && $block->hasField('field_overlay_png')) {
        if (!isset($form['settings']['block_form']['field_overlay_png'])) {
          $form['settings']['block_form']['field_overlay_png'] = [
            '#type' => 'managed_file',
            '#title' => t('Overlay Image'),
            '#default_value' => $block->get('field_overlay_png')->target_id,
            '#upload_location' => 'public://overlay-images/',
          ];
        }

        // Apply states to the field_overlay_png.
        $form['settings']['block_form']['field_overlay_png']['#states'] = [
          'visible' => [
            ':input[name="settings[block_form][field_display_mode]"]' => ['value' => 'image'],
          ],
          'required' => [
            ':input[name="settings[block_form][field_display_mode]"]' => ['value' => 'image'],
          ],
        ];
      }

      // Add JavaScript dependencies.
      $form['#attached']['library'][] = 'core/drupal';
      $form['#attached']['library'][] = 'core/drupal.states';
      $form['#attached']['library'][] = 'core/jquery';
      $form['#attached']['library'][] = 'core/once';

      // Add a wrapper div for AJAX updates.
      $form['settings']['block_form']['#prefix'] = '<div id="grand-hero-settings">';
      $form['settings']['block_form']['#suffix'] = '</div>';

      // Add validation handler.
      $form['#validate'][] = 'ys_core_grand_hero_validate';

      // Add custom JavaScript to ensure states are properly initialized.
      $form['#attached']['library'][] = 'ys_core/grand_hero_form';
    }
  }

  // Ensure the CAS bulk add only allows roles that role_delegate will allow.
  if ($form_id == 'bulk_add_cas_users') {
    $account = \Drupal::currentUser();
    $delegatable_roles = \Drupal::service('delegatable_roles');

    $delegatable_roles = $delegatable_roles->getAssignableRoles($account);
    $form['roles']['#options'] = $delegatable_roles;

    if (isset($form['cas_usernames'])) {
      $form['cas_usernames']['#title'] = t('NetIDs');
      $form['cas_usernames']['#description'] = t('Enter one NetID per line.');
    }

    // Hide the email field since CAS users get email from LDAP.
    if (isset($form['email_hostname'])) {
      $form['email_hostname']['#access'] = FALSE;
    }
  }

  // Load custom library.
  if (str_ends_with($form_id, '_layout_builder_form')) {
    $form['#attached']['library'][] = 'ys_core/node_layout_form';
  }

  // Changes wording of sticky at top of lists.
  if (isset($form['sticky'])) {
    $form['sticky']['widget']['value']['#title'] = t('Pin to the beginning of list');
  }

  // Hide Relations on taxonomy term edit page.
  $vocabularyForms = [
    'taxonomy_term_tags_form',
    'taxonomy_term_event_category_form',
    'taxonomy_term_post_category_form',
  ];

  if (in_array($form_id, $vocabularyForms)) {
    $form['relations']['#access'] = FALSE;
  }

  // Increase length of taxonomy vocabulary description field.
  if ($form_id == 'taxonomy_vocabulary_form') {
    $form['description']['#maxlength'] = 256;
  }

  // Hide core taxonomy description.
  // @see ys_core_help()
  if ($form_id == 'taxonomy_overview_vocabularies') {
    $form['#attached']['library'][] = 'ys_core/taxonomy_form';
  }

  // Add vocabulary description to the taxonomy overview form.
  if ($form_id == 'taxonomy_overview_terms') {
    $replacements['@description'] = $form_state->getBuildInfo()['args'][0]->getDescription();
    $form['help']['description'] = [
      '#type' => 'markup',
      '#markup' => "<p>" . t('@description', $replacements) . "</p>",
    ];
  }

  $block_content_forms = [
    'block_content_tabs_form',
    'block_content_quick_links_form',
    'block_content_media_grid_form',
    'block_content_gallery_form',
    'block_content_tabs_edit_form',
    'block_content_quick_links_edit_form',
    'block_content_media_grid_edit_form',
    'block_content_gallery_edit_form',
  ];

  if (in_array($form_id, $block_content_forms)) {
    $form['#attached']['library'][] = 'ys_core/block_form';
  }

  $layout_builder_block_forms = [
    'layout_builder_update_block',
    'layout_builder_add_block',
  ];

  if (in_array($form_id, $layout_builder_block_forms)) {
    $block_type_name = ys_core_get_block_type($form, $form_state);
    $limited_block_types = [
      'tabs',
      'quick_links',
      'media_grid',
      'gallery',
    ];
    if (in_array($block_type_name, $limited_block_types)) {
      $form['#attached']['library'][] = 'ys_core/block_form';
    }

    $emptyAdminLabel = $form['settings']['label']['#default_value'] ?? '';
    if (empty($emptyAdminLabel)) {
      // Add default admin label to layout builder blocks.
      $form_object = $form_state->getFormObject();
      $component = $form_object->getCurrentComponent();
      $plugin = $component->getPlugin();
      if (isset($plugin)) {
        // Get the default admin label from the block plugin label.
        $plugin_definition = $plugin->getPluginDefinition();
        $default_admin_label = $plugin_definition['admin_label'] ?? $plugin->getPluginId();
        // Add the plugin label as default value.
        $form['settings']['label']['#default_value'] = $default_admin_label;
      }
    }
  }

  _ys_core_disable_event_fields($form, $form_id);

  // Add JavaScript preview functionality to Facts and Figures icon fields.
  _ys_core_attach_icon_preview($form, $form_state, $form_id);
}

/**
 * Implements hook_preprocess_block().
 */
function ys_core_preprocess_block(&$variables) {
  $config = \Drupal::config('ys_core.social_links');

  // Add the cache tag, so that the theme setting information is rebuilt
  // when the config is saved.
  // Via: https://drupal.stackexchange.com/questions/266379/how-to-clear-cache-for-config-entity-after-making-changes
  \Drupal::service('renderer')->addCacheableDependency($variables, $config);

  // Add top level book link to the book navigation sub-nav.
  if ($variables['base_plugin_id'] == 'custom_book_navigation') {
    if (isset($variables['content']['#items']) && is_array($variables['content']['#items'])) {

      foreach ($variables['content']['#items'] as &$menuItem) {
        if (empty($menuItem['below'])) {
          continue;
        }

        // Clone top level menu item.
        $clonedMenuItem = $menuItem;

        // We don't want any other subitems, just the top level.
        $clonedMenuItem['below'] = NULL;

        array_unshift($menuItem['below'], $clonedMenuItem);
      }
    }
  }

  // Supports the post lead-in (field_teaser_lead_in) on reference cards.
  if ($variables['plugin_id'] == 'inline_block:reference_card') {

    if (!isset($variables['content']['field_show_teaser_lead_in']) && !isset($variables['content']['field_content_ref'])) {
      return;
    }

    $showEyebrow = 0;
    if (isset($variables['content']['field_show_teaser_lead_in'][0])) {
      $showEyebrow = $variables['content']['field_show_teaser_lead_in'][0]['#markup'];
    }

    $node = ($variables['content']['field_content_ref'][0]) ?? NULL;
    if ($node && $node['#node'] instanceof Node) {
      $node['#node']->show_eyebrow = $showEyebrow;
    }
  }

  _ys_core_webform_valid_email_check($variables);
}

/**
 * Passes the config to enable/disable search form into templates.
 *
 * Implements hook_preprocess_region().
 */
function ys_core_preprocess_region(&$variables) {
  $config = \Drupal::config('ys_core.header_settings');
  if ($variables['elements']['#region'] == 'header') {
    $variables['utility_nav__search'] = ($config->get('search')) ? $config->get('search')['enable_search_form'] : NULL;
    $variables['utility_nav__link__content'] = $config->get('cta_content') ?? NULL;
    $variables['utility_nav__link__url'] = $config->get('cta_url') ?? NULL;
    // Responsive image render array for focus header image.
    if ($focusHeaderImageId = $config->get('focus_header_image')) {
      // There are cases where the id is really an array of images over one.
      // We ensure that there will be only one numeric ID.
      if (is_numeric($focusHeaderImageId)) {
        if ($focusHeaderImageMedia = \Drupal::service('entity_type.manager')->getStorage('media')->load($focusHeaderImageId)) {
          $fileEntity = \Drupal::service('entity_type.manager')->getStorage('file');
          $focusHeaderImageFileUri = $fileEntity->load($focusHeaderImageMedia->field_media_image->target_id)->getFileUri();
          $focusHeaderImageRender = [
            '#type' => 'responsive_image',
            '#responsive_image_style_id' => 'background_image_focus_header',
            '#uri' => $focusHeaderImageFileUri,
            '#attributes' => [
              'alt' => $focusHeaderImageMedia->get('field_media_image')->first()->get('alt')->getValue(),
            ],
          ];

          $path = \Drupal::service('path.current')->getPath();
          $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
          $frontPage = \Drupal::config('system.site')->get('page.front');

          // See if the path is the front page.
          $isFrontPage = ($alias == $frontPage || $path == $frontPage || \Drupal::service('path.matcher')->isFrontPage());
          $variables['site_header__background_image'] = $isFrontPage ? $focusHeaderImageRender : FALSE;
        }
        else {
          _ys_core_clear_focus_header_image_config('ys_core.header_settings');
        }
      }
      else {
        _ys_core_clear_focus_header_image_config('ys_core.header_settings');
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'ys_core_user_login_form_submit';
}

/**
 * Custom submit handler for the login form.
 */
function ys_core_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements theme_preprocess_menu().
 */
function ys_core_preprocess_menu(&$variables) {
  if ($variables['menu_name'] == 'main') {
    // If submenu, add the top level link as the first link in the submenu.
    foreach ($variables['items'] as &$menuItem) {
      // Skip menu items that do not have subitems.
      if (empty($menuItem['below'])) {
        continue;
      }

      // Clone top level menu item.
      $clonedMenuItem = $menuItem;

      // We don't want any other subitems, just the top level.
      $clonedMenuItem['below'] = NULL;

      // Main menu items get the heading treatment.
      // @see component-library-twig/components/02-molecules/menu/_yds-menu-item.twig
      $clonedMenuItem['list__item__is_heading'] = TRUE;

      // Get the CTA text from menu item extras field. (for mega menu)
      $clonedMenuItem['heading_cta'] = $clonedMenuItem['entity']->get('field_menu_top_level_link_cta')->value ?: t('Explore @title', ['@title' => $clonedMenuItem['title']]);

      // Default the node_title to the menu title.
      $clonedMenuItem['node_title'] = $clonedMenuItem['title'];

      // If the menu item is associated with a node, replace the node_title
      // with the node's title.
      if ($menuItem['url']->isRouted()) {
        $routeParameters = $menuItem['url']->getRouteParameters();

        if (array_key_exists('node', $routeParameters)) {
          $nodeId = $routeParameters['node'];

          if ($nodeId) {
            /** @var \Drupal\node\Entity\Node $node */
            $node = \Drupal::entityTypeManager()->getStorage('node')->load($nodeId);

            if ($node) {
              $clonedMenuItem['node_title'] = $node->getTitle();
            }
          }
        }
      }

      // Add cloned item to the beginning of the menu.
      array_unshift($menuItem['below'], $clonedMenuItem);
    }
  }
  // CAS bulk add menu item title change,
  // and remove Add user for non-platform admins.
  if (!empty($variables['items'])) {
    $current_user = \Drupal::currentUser();
    $user_roles = $current_user->getRoles();
    $has_platform_admin = in_array('platform_admin', $user_roles) || $current_user->id() == 1;
    foreach ($variables['items'] as &$item) {
      // These are submenu items.
      if (!empty($item['below'])) {
        foreach ($item['below'] as $subkey => &$subitem) {
          if (isset($subitem['url']) && $subitem['url']->isRouted()) {
            $route_name = $subitem['url']->getRouteName();
            if ($route_name === 'cas.bulk_add_cas_users') {
              $subitem['title'] = t('Add NetID User(s)');
            }
            if ($route_name === 'user.admin_create' && !$has_platform_admin) {
              unset($item['below'][$subkey]);
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function ys_core_module_implements_alter(&$implementations, $hook) {
  // Forces ys_core help hook to come before others.
  // @see https://drupal.stackexchange.com/questions/242572/is-it-possible-to-modify-help-text-on-a-vocabulary-page
  if ($hook == 'help') {
    $implementations = ['ys_core' => $implementations['ys_core']] + $implementations;
  }
}

/**
 * Implements hook_help().
 */
function ys_core_help($route_name, RouteMatchInterface $route_match) {
  // Overrides help description.
  // This is "temporary" until core adds this functionality.
  // Uses CSS to hide the core description.
  // @see https://drupal.stackexchange.com/questions/242572/is-it-possible-to-modify-help-text-on-a-vocabulary-page
  // @see https://www.drupal.org/project/drupal/issues/487386
  switch ($route_name) {
    case 'entity.taxonomy_vocabulary.collection':

      $output = '<p class="replacement-taxonomy-help">' . t('Taxonomy is used to classify website content into groups called vocabularies. Each vocabulary contains a set of terms used to categorize content. For example, an "Event Type" vocabulary contains terms like "Online" and "In-Person". This allows for easy categorization and organization of content on a website.') . '</p>';
      return $output;

    case 'entity.block_content.collection':

      $output = '<p class="replacement-block-help">' . t("Reuse your content with Reusable Blocks. Once created, Reusable Blocks will be available in the Block Picker and can be added when editing content in Layout Builder. Changes made to a Reusable Block's content are reflected anywhere the Block is used.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function ys_core_page_attachments(array &$page) {
  // Add Siteimprove Javascript only on production.
  $config = \Drupal::config('config_split.config_split.production_config');
  if ($config->get('status')) {
    $page['#attached']['library'][] = 'ys_core/siteimprove';
  }

  // Custom or fallback favicons.
  $favicons = \Drupal::service('ys_core.media_manager')->getFavicons();
  foreach ($favicons as $name => $favicon) {
    $page['#attached']['html_head'][] = [$favicon, $name];
  }
}

/**
 * Implements hook_preprocess_image_widget() for SiteSettingsForm.php.
 */
function ys_core_preprocess_image_widget(&$variables) {
  /*
   * Used for previewing the managed file for favicons and others.
   * @see web/profiles/custom/yalesites_profile/modules/custom/ys_core/src/Form/SiteSettingsForm.php
   * @see
   * https://drupal.stackexchange.com/questions/212480/form-api-image-preview
   */
  $element = $variables['element'];

  if (isset($element['#use_preview'])) {

    $variables['attributes'] = [
      'class' => [
        'image-widget',
        'js-form-managed-file',
        'form-managed-file',
        'clearfix',
      ],
    ];

    $config = \Drupal::config('system.site');
    $variables['site_name'] = $config->get('name');

    if (!empty($element['fids']['#value'])) {
      $file = reset($element['#files']);
      $element['file_' . $file->id()]['filename']['#suffix'] = ' <span class="file-size">(' . format_size($file->getSize()) . ')</span> ';
      $file_variables = [
        'style_name' => $element['#preview_image_style'],
        'uri' => $file->getFileUri(),
      ];

      // Determine image dimensions.
      if (isset($element['#value']['width']) && isset($element['#value']['height'])) {
        $file_variables['width'] = $element['#value']['width'];
        $file_variables['height'] = $element['#value']['height'];
      }
      else {
        $image = \Drupal::service('image.factory')->get($file->getFileUri());
        if ($image->isValid()) {
          $file_variables['width'] = $image->getWidth();
          $file_variables['height'] = $image->getHeight();
        }
        else {
          $file_variables['width'] = $file_variables['height'] = NULL;
        }
      }

      $element['preview'] = [
        '#weight' => -10,
        '#theme' => 'image_style',
        '#width' => $file_variables['width'],
        '#height' => $file_variables['height'],
        '#style_name' => $file_variables['style_name'],
        '#uri' => $file_variables['uri'],
      ];

      // Store the dimensions in the form so the file doesn't have to be
      // accessed again. This is important for remote files.
      $element['width'] = [
        '#type' => 'hidden',
        '#value' => $file_variables['width'],
      ];
      $element['height'] = [
        '#type' => 'hidden',
        '#value' => $file_variables['height'],
      ];
    }
    else {
      $variables['fallback_image'] = TRUE;
    }

    // Sets a twig variable to use the favicon preview.
    // @see web/themes/custom/ys_admin_theme/templates/content-edit/image-widget.html.twig
    $variables['use_favicon_preview'] = $element['#use_favicon_preview'] ?? NULL;
    $variables['use_svg_preview'] = $element['#use_svg_preview'] ?? NULL;

    $variables['data'] = [];
    foreach (Element::children($element) as $child) {
      $variables['data'][$child] = $element[$child];
    }
  }
}

/**
 * Implements hook_ENTITY_update().
 *
 * Clears the cache for rendered items on taxonomy term update.
 */
function ys_core_taxonomy_term_update() {
  Cache::invalidateTags(['rendered']);
}

/**
 * Implements hook_preprocess_page().
 */
function ys_core_preprocess_page(&$variables) {
  // Add the cache tag, so that the theme setting information is rebuilt
  // when the config is saved.
  // Via: https://drupal.stackexchange.com/questions/266379/how-to-clear-cache-for-config-entity-after-making-changes
  $config = \Drupal::config('ys_core.header_settings');
  \Drupal::service('renderer')->addCacheableDependency($variables, $config);
}

/**
 * Retrieves the block type from a form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 *
 * @return string
 *   The block type name.
 */
function ys_core_get_block_type(&$form, &$form_state) {
  $block_type_name = "";
  $inline_block_type_name = $form_state->getBuildInfo()['args'][3];

  // If adding a new element, arg 3 should be of the form:
  // inline_block:BLOCK_TYPE_NAME.
  if (strpos($inline_block_type_name, ':') !== FALSE) {
    $block_type_name = explode(':', $inline_block_type_name)[1];

    // While global block adds have this kind of inline block type name,
    // it's by UUID.
    if (strlen($block_type_name) == 36) {
      $block_content_manager = Drupal::entityTypeManager()
        ->getStorage('block_content');
      $block_content = $block_content_manager->loadByProperties(['uuid' => $block_type_name]);
      $block_type_name = reset($block_content)->bundle();
    }
  }
  // Otherwise, attempt to get it the original way if it exists.
  elseif (isset($form['settings']['block_form']['#block'])) {
    $block_type_name = $form['settings']['block_form']['#block']->bundle();
  }
  // If we're using reusable blocks, this is how we can get the block type.
  elseif (isset($form['block_form']['#block'])) {
    $block_type_name = $form['block_form']['#block']->bundle();
  }
  // If we can't find it, make it something that will fail any future checks.
  else {
    $block_type_name = "unknown";
  }

  return $block_type_name;
}

/**
 * Implements hook_preprocess_html().
 */
function ys_core_preprocess_html(&$variables) {
  // Adds the content type in a class to support specific content type styling.
  $variables['attributes']['class'][] = isset($variables['node_type']) ? "ys-content-type-{$variables['node_type']}" : NULL;

  // Add font pairing data attribute to body tag.
  $config = \Drupal::config('ys_core.site');
  $font_pairing = $config->get('font_pairing') ?? 'yalenew';
  $variables['attributes']['data-font-pairing'] = $font_pairing;
}

/**
 * Helper function to clear the focus header image config.
 *
 * @param string $configName
 *   The name of the config to clear the focus header on.
 */
function _ys_core_clear_focus_header_image_config($configName) {
  $config = \Drupal::configFactory()->getEditable($configName);
  $config->clear('focus_header_image')->save();

  $headerSettingsPath = Url::fromRoute('ys_core.admin_header_settings')->toString();
  $message = t(
    'Note, the focus header image has been deleted.  You may set a new one in the <a href=":header_settings_path">header settings form<a>.',
    [
      ':header_settings_path' => $headerSettingsPath,
    ]
  );

  \Drupal::messenger()->addError($message);
}

/**
 * Implements preprocess_views_view_unformatted().
 */
function ys_core_preprocess_views_view_unformatted(&$variables) {
  /* Added because taxonomy term view normally relies on a title block to get
   * the title on the page, we need the title inside a component.
   * @see atomic/templates/views/views-view-unformatted--taxonomy-term.html.twig
   */
  $request = \Drupal::request();
  if ($route = $request->attributes->get(RouteObjectInterface::ROUTE_OBJECT)) {
    $routeName = \Drupal::service('current_route_match')->getRouteName();
    if ($routeName == 'entity.taxonomy_term.canonical') {
      $title = \Drupal::service('title_resolver')->getTitle($request, $route);
      $variables['title'] = $title['#markup'] ?? NULL;
    }
  }
}

/**
 * If current user is platform admin or user 1, allow secret items.
 *
 * @return bool
 *   Returns TRUE if current user is a platform admin or user 1.
 */
function ys_core_allow_secret_items(AccountProxy $currentUserSession) {
  $allowSecretItems = FALSE;

  if (ys_core_allow_secret_items_user_1($currentUserSession) || in_array('platform_admin', $currentUserSession->getAccount()->getRoles())) {
    $allowSecretItems = TRUE;
  }

  return $allowSecretItems;
}

/**
 * If current user is user 1, allow secret items.
 *
 * @return bool
 *   Returns TRUE if current user is user 1.
 */
function ys_core_allow_secret_items_user_1(AccountProxy $currentUserSession) {
  $allowSecretItems = FALSE;
  if ($currentUserSession->getAccount()->id() == 1) {
    $allowSecretItems = TRUE;
  }
  return $allowSecretItems;
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form.
 */
function ys_core_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->get('view');

  if (in_array($view->id(), ['views_basic_scaffold', 'views_basic_scaffold_events'])) {
    // List of form elements to which Chosen should be applied.
    $chosen_filters = [
      'field_category_target_id',
      'field_category_target_id_1',
      'field_affiliation_target_id',
      'field_custom_vocab_target_id',
      'field_audience_target_id',
      'post_year_filter',
    ];
    // Loop through each specified field and apply Chosen settings if the field
    // exists.
    foreach ($chosen_filters as $filter_name) {
      if (isset($form[$filter_name])) {
        $form[$filter_name]['#chosen'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * If the current user is not user 1, remove the single content sync tab.
 */
function ys_core_menu_local_tasks_alter(&$data, $route_name, $cachability) {
  if (isset($data['tabs'][0])) {
    foreach ($data['tabs'][0] as $key => $tab) {
      if (strpos($key, 'single_content_sync') === 0 &&
        \Drupal::currentUser()->id() != 1) {
        unset($data['tabs'][0][$key]);
      }
    }
  }
}

/**
 * Disabled event fields for imported data.
 */
function _ys_core_disable_event_fields(&$form, $form_id) {
  // Disables fields that are imported from an integration.
  $formsToCheck = [
    'node_event_form',
    'node_event_edit_form',
    'node_event_quick_node_clone_form',
  ];

  if (in_array($form_id, $formsToCheck)) {
    $fieldsToDisable = [
      'field_localist_id',
      'field_event_status',
      'field_localist_event_url',
      'field_localist_event_image_url',
      'field_localist_event_image_alt',
      'field_localist_ics_url',
      'field_localist_register_enabled',
      'field_event_source',
      'field_event_id',
    ];
    foreach ($fieldsToDisable as $field) {
      $form[$field]['#disabled'] = TRUE;
    }
  }
}

/**
 * Validates the email address in the webform plugin.
 *
 * @param array $variables
 *   The render variables array.
 */
function _ys_core_webform_valid_email_check(&$variables) {
  $plugin_id = $variables['plugin_id'];
  $in_layout_builder = $variables['in_preview'] ?? FALSE;
  $validEmail = TRUE;

  if ($in_layout_builder && $plugin_id == 'inline_block:webform') {
    $config = \Drupal::config('system.site');
    $siteMail = $config->get('mail');

    $validEmail = ($siteMail != 'noreply@noreply.yale.edu');
  }

  if (!$validEmail) {
    $variables['content']['#configuration_issue'] = t('Please go into Settings->Site Settings and update the site email to an email address that can receive this submission.');
  }
}

/**
 * AJAX callback for Grand Hero block display mode changes.
 */
function ys_core_grand_hero_display_mode_callback($form, FormStateInterface $form_state) {
  $trigger = $form_state->getTriggeringElement();
  $parents = $trigger['#array_parents'];
  array_pop($parents);
  $element = NestedArray::getValue($form, $parents);

  return $element['settings']['block_form'];
}

/**
 * Validation handler for Grand Hero block form.
 */
function ys_core_grand_hero_validate($form, FormStateInterface $form_state) {
  $display_mode = $form_state->getValue(['settings', 'block_form', 'field_display_mode']);

  if ($display_mode === 'text') {
    if (empty($form_state->getValue(['settings', 'block_form', 'field_heading', 0, 'value']))) {
      $form_state->setError($form['settings']['block_form']['field_heading'], t('Heading is required when using Text display mode.'));
    }
  }
  elseif ($display_mode === 'image') {
    if (empty($form_state->getValue(['settings', 'block_form', 'field_overlay_png', 'media_library_selection']))) {
      $form_state->setError($form['settings']['block_form']['field_overlay_png'], t('Overlay PNG is required when using Image display mode.'));
    }
  }
}

/**
 * Implements hook_toolbar_alter().
 *
 * Remove Coffee module's "Go to" item from secondary toolbar and attach
 * Coffee functionality to our custom menu item.
 */
function ys_core_toolbar_alter(&$items) {
  // Remove Coffee item from secondary toolbar if it exists.
  if (isset($items['coffee'])) {
    unset($items['coffee']);
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function ys_core_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['taxonomy_vocabulary'])) {
    // Override the collection route class for taxonomy vocabularies.
    // @see /admin/structure/taxonomy
    $entity_types['taxonomy_vocabulary']->setHandlerClass('list_builder', 'Drupal\ys_core\YaleSitesVocabularyListBuilder');
  }
}

/**
 * Allowed values callback for Facts and Figures icon field.
 *
 * This function serves as a bridge between Drupal's allowed_values_function
 * mechanism and our FactsAndFiguresIconManager service.
 *
 * @param \Drupal\Core\Field\FieldStorageDefinitionInterface $definition
 *   The field storage definition.
 * @param \Drupal\Core\Entity\FieldableEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of valid values in the form:
 *   - option_key => option_value
 */
function ys_core_facts_icon_allowed_values(FieldStorageDefinitionInterface $definition, ?FieldableEntityInterface $entity = NULL, $cacheable = TRUE) {
  /** @var \Drupal\ys_core\FactsAndFiguresIconManager $icon_manager */
  $icon_manager = \Drupal::service('ys_core.facts_and_figures_icon_manager');
  return $icon_manager->getFlatIconOptions();
}

/**
 * Helper function to attach icon preview to Facts and Figures forms.
 *
 * This function adds JavaScript preview functionality to Facts and Figures icon
 * fields. The field options are handled by the allowed_values_function in field
 * configuration.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 * @param string $form_id
 *   The form ID.
 */
function _ys_core_attach_icon_preview(&$form, FormStateInterface $form_state, $form_id) {
  // Only process paragraph forms and layout builder forms that might contain
  // paragraphs.
  $relevant_forms = [
    'paragraph_facts_item_form',
    'paragraph_facts_item_edit_form',
    'layout_builder_add_block',
    'layout_builder_update_block',
  ];

  $is_relevant_form = FALSE;
  foreach ($relevant_forms as $pattern) {
    if (strpos($form_id, $pattern) === 0) {
      $is_relevant_form = TRUE;
      break;
    }
  }

  // Also check for block content forms that contain facts paragraphs.
  if (strpos($form_id, 'block_content_facts') !== FALSE) {
    $is_relevant_form = TRUE;
  }

  if (!$is_relevant_form) {
    return;
  }

  // Always attach the library for forms that might contain icon fields.
  $form['#attached']['library'][] = 'ys_core/facts_icon_preview';

  // Add CSS class to icon fields if they exist and are visible.
  if (isset($form['field_icon'])) {
    if (isset($form['field_icon']['widget'][0]['value'])) {
      $form['field_icon']['widget'][0]['value']['#attributes']['class'][] = 'facts-icon-selector';
    }
  }
}

/**
 * Implements hook_menu_local_actions_alter().
 *
 * Hide 'Add user' action for users without the platform_admin role.
 */
function ys_core_menu_local_actions_alter(&$local_actions) {
  // Get the current route name.
  $route_name = \Drupal::routeMatch()->getRouteName();

  // Only affect the user admin page where the user creation actions appear.
  if ($route_name === 'entity.user.collection') {
    // Disable caching for local actions on this page to prevent aching issues.
    \Drupal::service('plugin.manager.menu.local_action')->useCaches(FALSE);

    $current_user = \Drupal::currentUser();

    // Skip processing if user is user 1.
    if ($current_user->id() == 1) {
      return;
    }

    // Check if current user has the platform_admin role.
    $user_roles = $current_user->getRoles();
    $has_platform_admin = in_array('platform_admin', $user_roles);

    // Hide the actions if user doesn't have platform_admin role.
    if (!$has_platform_admin) {
      // Remove "Add user" action.
      if (isset($local_actions['user_admin_create'])) {
        unset($local_actions['user_admin_create']);
      }

      // Change the title of the CAS bulk add action.
      if (isset($local_actions['cas.bulk_add_cas_users'])) {
        $local_actions['cas.bulk_add_cas_users']['title'] = 'Add NetID Users';
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
$form['ys_core_netid_alert_message'] = [
  '#type' => 'markup',
  '#markup' => t('To add users with NetIDs go <a href=":url">here</a>.', [
    ':url' => Url::fromRoute('cas.bulk_add_cas_users')->toString(),
  ]),
  '#prefix' => '<div class="messages messages--warning">',
  '#suffix' => '</div>',
  '#weight' => -99,
];

* implements hook_yale_cas_pre_redirect_service_parameters_alter() .
 *
 * Allows modules to alter CAS service parameters before redirect
 * at the pre - redirect event .
 * /

/**
 *
 */
function ys_core_yale_cas_pre_redirect_service_parameters_alter(
  array &$service_parameters,
  $event,
) {
  // Retrieve the ys_core config.
  $config = \Drupal::config('ys_core.site');
  $app_name = $config->get('cas_app_name') ?: 'yalesites';

  // Set the app parameter to the configured value.
  $service_parameters['app'] = $app_name;
}

/**
 * Implements hook_entity_type_alter().
 */
function ys_core_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['taxonomy_vocabulary'])) {
    // Override the collection route class for taxonomy vocabularies.
    // @see /admin/structure/taxonomy
    $entity_types['taxonomy_vocabulary']->setHandlerClass('list_builder', 'Drupal\ys_core\YaleSitesVocabularyListBuilder');
  }
}
