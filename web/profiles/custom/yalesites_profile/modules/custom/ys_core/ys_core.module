<?php

/**
 * @file
 * Contains ys_core.module functions.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

/**
 * @file
 * Contains ys_core.module functions.
 */

/**
 * Add template file for social links.
 *
 * Implements hook_theme().
 */
function ys_core_theme($existing, $type, $theme, $path): array {
  return [
    'ys_breadcrumb_block' => [
      'variables' => [
        'items' => [],
      ],
    ],
    'ys_support_form' => [
      'variables' => [
        'link' => NULL,
      ],
    ],
    'ys_dashboard' => [
      'variables' => [],
    ],
    'ys_dashboard_resources' => [
      'variables' => [],
    ],
    'ys_social_links' => [
      'variables' => [
        'icons' => [],
      ],
    ],
    'ys_search_form' => [
      'variables' => [],
    ],
    'ys_title_breadcrumb' => [
      'variables' => [
        'page_title' => NULL,
        'breadcrumbs_placeholder' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORMID_alter().
 */
function ys_core_form_node_page_layout_builder_form_alter(&$form, $form_state, $form_id) {
  // Add styles to the layout builder form.
  $form['#attached']['library'][] = 'ys_core/node_layout_form';
}

/**
 * Implements hook_form_alter().
 */
function ys_core_form_alter(&$form, $form_state, $form_id) {
  // Changes wording of sticky at top of lists.
  if (isset($form['sticky'])) {
    $form['sticky']['widget']['value']['#title'] = t('Pin to the beginning of list');
  }
}

/**
 * Passes the config to enable/disable search form into templates.
 *
 * Implements hook_preprocess_region().
 */
function ys_core_preprocess_region(&$variables) {
  $config = \Drupal::config('ys_core.site');
  if ($variables['elements']['#region'] == 'header' && $config->get('search')) {
    $variables['utility_nav__search'] = $config->get('search')['enable_search_form'];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_core_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#submit'][] = 'ys_core_user_login_form_submit';
}

/**
 * Custom submit handler for the login form.
 */
function ys_core_user_login_form_submit($form, FormStateInterface $form_state) {
  $url = Url::fromRoute('<front>');
  $form_state->setRedirectUrl($url);
}

/**
 * Implements hook_page_preprocess_menu__main().
 */
function ys_core_preprocess_menu__main(&$variables) {
  // If submenu, add the top level link as the first link in the submenu.
  foreach ($variables['items'] as &$menuItem) {
    // Skip menu items that do not have subitems.
    if (empty($menuItem['below'])) {
      continue;
    }

    // Clone top level menu item.
    $clonedMenuItem = $menuItem;

    // We don't want any other subitems, just the top level.
    $clonedMenuItem['below'] = NULL;

    // If a node, use the node title instead of link title.
    $routeParams = $clonedMenuItem['original_link']->getRouteParameters();
    if (!empty($routeParams['node'])) {
      /** @var \Drupal\node\Entity\Node $node */
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($routeParams['node']);
      $clonedMenuItem['title'] = $node->getTitle();
    }

    // Add cloned item to the beginning of the menu.
    array_unshift($menuItem['below'], $clonedMenuItem);

  }
}

/**
 * Implements hook_preprocess_media().
 */
function ys_core_preprocess_block(&$variables) {

  $altTextOverride = \Drupal::service('ys_core.alt_text_override_manager');

  kint($altTextOverride->tester());

  // Override alt text.
  $blocksForAltText = [
    'inline_block:cta_banner',
    'inline_block:image',
    'inline_block:content_spotlight',
  ];

  if (in_array($variables['plugin_id'], $blocksForAltText)) {
    $altText = NULL;
    $decorative = 0;
    if (isset($variables['content']['field_override_alt_text'])) {
      if (isset($variables['content']['field_override_alt_text']['#items'])) {
        $altTextValues = $variables['content']['field_override_alt_text']['#items']->getValue();
        $decorative = $altTextValues[0]['decorative'];
        if ($decorative) {
          $altText = ' ';
        }
        else {
          $altText = $altTextValues[0]['value'] ?? $altTextValues[0]['value'];
        }
      }

      if ($altText) {
        // Via: https://drupalsun.com/glassdimly/2017/07/29/drupal-8-get-uri-title-and-alt-media-entity-reference-item
        $mid = $variables['content']['field_media']['#items']->referencedEntities()[0]->id();
        $media = Media::load($mid);
        $img_entity_list = $media->get('field_media_image');
        /** @var \Drupal\image\Plugin\Field\FieldType\ImageItem $img_entity */
        $img_entity = $img_entity_list->first();
        $img_entity->set('alt', $altText);
      }
    }

  }
}

// function ys_core_preprocess_paragraph(&$variables) {
//   /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
//   $paragraph = $variables['paragraph'];

//   $parentBundle = $paragraph->bundle();

//   $paragraphsForAltText = [
//     'custom_card',
//   ];

//   if(in_array($parentBundle, $paragraphsForAltText)) {

//      $variables['sitename'] = \Drupal::config('system.site')->get('name');
//   }
// }
