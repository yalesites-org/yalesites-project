<?php

/**
 * @file
 * Contains ys_themes.module functions.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldFilteredMarkup;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Provides custom key-value options for component-specific styling via config.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created, if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cache-able.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function ys_themes_allowed_values_function(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {
  $options = [];
  $config = \Drupal::config('ys_themes.component_overrides');

  foreach ($config->get() as $component => $fields) {
    foreach ($fields as $fieldName => $fieldData) {
      if ($entity) {
        if ($entity->bundle() === $component && $definition->getName() === $fieldName) {
          foreach ($fieldData['values'] as $machineSetting => $humanName) {
            $options[$machineSetting] = FieldFilteredMarkup::create($humanName);
          }
        }
      }
      /* This case allows the layout builder manage default layout work as in
       * that mode, there is no entity.
       */
      else {
        $options[''] = '';
      }
    }
  }

  return $options;
}

/**
 * Sets the default value for component-specific styling via config.
 *
 * @param \Drupal\Core\Entity\ContentEntityInterface $entity
 *   The entity being created.
 * @param \Drupal\Core\Field\FieldDefinitionInterface $definition
 *   The field definition.
 *
 * @return array
 *   An array of default value keys with each entry keyed with the “value” key.
 *
 * @see \Drupal\Core\Field\FieldConfigBase::getDefaultValue()
 */
function ys_themes_default_value_function(ContentEntityInterface $entity, FieldDefinitionInterface $definition) {
  $config = \Drupal::config('ys_themes.component_overrides');
  $default = NULL;
  foreach ($config->get() as $component => $fields) {
    foreach ($fields as $fieldName => $fieldData) {
      if ($entity->bundle() === $component && $definition->getName() === $fieldName) {
        $default = $fieldData['default'];
      }
    }
  }

  return [
    ['value' => $default],
  ];
}

/**
 * Implements hook_page_attachments_alter().
 */
function ys_themes_page_attachments_alter(array &$page) {
  // Add CSS custom variables to the page to pass global overrides to the theme.
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'style',
      '#value' => ys_themes_build_css_variables(),
    ],
    'yalesites_theme_settings',
  ];
}

/**
 * Build a string of CSS variables to override theme settings.
 *
 * @todo Refactor the backend management once frontend conventions are set.
 * We will look for ways to introduce error handling and unit testing.
 *
 * @return string
 *   CSS code.
 */
function ys_themes_build_css_variables() : string {
  $settings = \Drupal::service('ys_themes.theme_settings_manager');
  $css = [];
  $css[] = ':root {';

  $actionColor = $settings->getSetting('action_color');
  $css[] = "--color-theme-action: var(--color-{$actionColor});";

  $accentColor = $settings->getSetting('accent_color');
  $css[] = "--color-theme-accent: var(--color-{$accentColor});";

  $pullQuoteColor = $settings->getSetting('pull_quote_color');
  $css[] = "--color-theme-pull-quote-accent: var(--color-{$pullQuoteColor});";

  $lineColor = $settings->getSetting('line_color');
  $css[] = "--color-theme-divider: var(--color-{$lineColor});";

  $lineThickness = $settings->getSetting('line_thickness');
  $css[] = "--thickness-theme-divider: var(--thickness-divider-{$lineThickness});";

  $css[] = '}';
  return implode(PHP_EOL, $css);
}

/**
 * Implements hook_preprocess_block().
 */
function ys_themes_preprocess_block(&$variables) {
  $config = \Drupal::config('ys_themes.theme_settings');

  // Add the cache tag, so that the theme setting information is rebuilt
  // when the config is saved.
  // Via: https://drupal.stackexchange.com/questions/266379/how-to-clear-cache-for-config-entity-after-making-changes
  \Drupal::service('renderer')->addCacheableDependency($variables, $config);

  $block_content_ids = ['inline_block', 'block_content'];

  if (!empty($variables['base_plugin_id']) && in_array($variables['base_plugin_id'], $block_content_ids)) {

    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
      $variables['parentNode'] = $node->getType();

      // Limit variable include to components that need to use
      // `cta__component_theme` lever/dial. Currently that is only button_link.
      if ($variables['derivative_plugin_id'] == 'button_link') {
        $variables['cta__component_theme'] = $config->get('button_theme');
      }

    }
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function ys_themes_preprocess_views_view(&$variables) {
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    $variables['parentNode'] = $node->getType();
  }
}

/**
 * Implements hook_preprocess_page().
 */
function ys_themes_preprocess_page(&$variables) {
  // Sets the global theme from lever settings.
  $config = \Drupal::config('ys_themes.theme_settings');
  $variables['site_global__theme'] = $config->get('global_theme');

  // @see ys_themes_preprocess_block() for explanation.
  \Drupal::service('renderer')->addCacheableDependency($variables, $config);
}

/**
 * Implements hook_preprocess_menu().
 */
function ys_themes_preprocess_menu(&$variables) {
  if ($variables['menu_name'] == 'main') {
    $config = \Drupal::config('ys_themes.theme_settings');

    // @see ys_themes_preprocess_block() for explanation.
    \Drupal::service('renderer')->addCacheableDependency($variables, $config);
  }
}

/**
 * Implements hook_form_alter().
 */
function ys_themes_form_alter(&$form, $form_state, $form_id) {

  $config = \Drupal::config('ys_themes.theme_settings');

  /*
  Turn off the title and hide the inline block "display title" field.
  Rename the field title and description to inform the editor how it is used.
   */
  if ($form_id == 'layout_builder_update_block' || $form_id == 'layout_builder_add_block') {
    $form['settings']['label']['#title'] = t('Administrative label');
    $form['settings']['label']['#description'] = t('Used when not showing content preview');
    $form['settings']['label_display']['#default_value'] = FALSE;
    $form['settings']['label_display']['#access'] = FALSE;
  }

  // Allow front-end theming of the layout builder discard changes form.
  $formsToStyle = [
    'layout_builder_revert_overrides',
    'layout_builder_discard_changes',
    'user_login_form',
  ];

  if (in_array($form_id, $formsToStyle)) {
    $form['#attributes']['class'][] = 'layout--centered';
    $form['#attached']['library'][] = 'ys_themes/ys_themes';
  }

  // Styles submit buttons on webforms and views exposed filters.
  // $buttonTheme comes from the theme settings form.
  $buttonTheme = $config->get('button_theme');

  if (str_starts_with($form_id, 'webform') || $form_id == 'views_exposed_form') {
    $base = &$form['actions']['submit'];
  }

  if ($form_id == 'content_moderation_entity_moderation_form') {
    $base = &$form['submit'];
  }

  if (str_starts_with($form_id, 'webform') || $form_id == 'views_exposed_form' || $form_id == 'content_moderation_entity_moderation_form') {

    $base['#attributes']['data-cta-theme'] = $buttonTheme;
    $base['#attributes']['data-cta-radius'] = 'none';
    $base['#attributes']['data-cta-style'] = 'filled';
    $base['#attributes']['data-cta-outline-weight'] = 2;
    $base['#attributes']['data-cta-hover-style'] = 'fade';
    $base['#attributes']['class'][] = 'cta';

    // Removes class that causes unnecessary styling.
    $classes = &$base['#attributes'];
    $classes = array_filter($classes, function ($e) {
      return $e != 'form-item__textfield';
    });
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function ys_themes_preprocess_form_element(array &$variables) {
  //
  // Insert the global theme value into the attribute to pass to twig.
  // Used for the color palettes on the theme settings form.
  //
  if (isset($variables['element']['#formdazzle'])) {
    if ($variables['element']['#formdazzle']['form_id'] == 'ys_themes_settings_form') {

      $config = \Drupal::config('ys_themes.theme_settings');
      $globalTheme = $config->get('global_theme');
      $allOptions = \Drupal::service('ys_themes.theme_settings_manager')->getOptions();

      $elementName = $variables['name'];
      $value = $variables['element']['#return_value'];

      // Sets various values related to current element as well as global theme
      // to twig for cleaner twig templates.
      if (isset($allOptions[$elementName]['values'][$value]['color_theme'])) {
        $variables['label']['#context']['color_theme'] = $allOptions[$elementName]['values'][$value]['color_theme'];
      }
      if (isset($allOptions[$elementName]['values'][$value]['color_theme_2'])) {
        $variables['label']['#context']['color_theme_2'] = $allOptions[$elementName]['values'][$value]['color_theme_2'];
      }
      $variables['label']['#context']['current_global_theme'] = $globalTheme;
      $variables['label']['#context']['value'] = $value;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function ys_themes_preprocess_html(&$variables) {
  /*
   * Adds an attribute to the body if the page title is hidden. This assists
   * with breadcrumb styling to make sure that it has enough bottom margin.
   */
  $route_match = \Drupal::service('current_route_match');
  // Check if this is a node.
  if ($node = $route_match->getParameter('node')) {
    // Check if we have layout builder enabled.
    if ($layoutBuilder = $node->layout_builder__layout) {
      foreach ($layoutBuilder->getSections() as $section) {
        // Check that the section is the page meta section.
        if ($section->getLayoutId() == 'ys_layout_page_meta') {
          foreach ($section->getComponents() as $component) {
            // Check that the layout builder component is the page_meta_block.
            if ($component->get('configuration')['id'] == 'page_meta_block') {
              // Check that the page_meta_block doesn't have a visible title.
              if (!str_contains($component->get('configuration')['page_title_display'], "visible")) {
                $variables['attributes']['page-title-hidden'] = 'true';
              }
            }
          }
        }
      }
    }
  }
}
