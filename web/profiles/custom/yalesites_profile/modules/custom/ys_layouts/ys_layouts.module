<?php

/**
 * @file
 * Contains ys_layouts.module functions.
 *
 * This module provides Layout Builder customizations and integrations:
 * - Custom block templates for YaleSites components
 * - Layout Builder sidebar state management
 * - Section padding configuration
 * - Block reusability improvements.
 *
 * Dependencies:
 * - Layout Builder (core)
 * - Gin admin theme (for sidebar customizations)
 * - Block Content (core)
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\Context\Context;
use Drupal\Core\Plugin\Context\EntityContextDefinition;

/**
 * Add template files.
 *
 * Implements hook_theme().
 */
function ys_layouts_theme($existing, $type, $theme, $path): array {
  return [
    'ys_event_meta_block' => [
      'variables' => [
        'event_title__heading' => NULL,
        'event_dates' => [],
        'ics_url' => NULL,
        'canonical_url' => NULL,
        'ticket_url' => NULL,
        'ticket_cost' => NULL,
        'place' => [],
        'event_types' => [],
        'event_audience' => [],
        'event_topics' => [],
        'description' => NULL,
        'event_meta__cta_primary__href' => NULL,
        'event_meta__cta_primary__content' => NULL,
        'event_experience' => NULL,
        'localist_image_url' => NULL,
        'localist_image_alt' => NULL,
        'teaser_media' => [],
        'has_register' => NULL,
        'cost_button_text' => 'Register',
        'localist_url' => NULL,
        'stream_url' => NULL,
        'stream_embed_code' => NULL,
        'event_source' => NULL,
        'event_id' => NULL,
        'event_featured_date' => NULL,
      ],
    ],
    'ys_page_meta_block' => [
      'variables' => [
        'page_title' => NULL,
        'page_title_display' => 'visible',
      ],
    ],
    'ys_post_meta_block' => [
      'variables' => [
        'label' => NULL,
        'author' => NULL,
        'date_formatted' => NULL,
        'show_read_time' => NULL,
        'show_social_media_sharing_links' => NULL,
        'post_authors' => NULL,
      ],
    ],
    'ys_profile_meta_block' => [
      'variables' => [
        'profile_meta__heading' => NULL,
        'profile_meta__title_line' => NULL,
        'profile_meta__subtitle_line' => NULL,
        'profile_meta__department' => NULL,
        'profile_meta__pronouns' => NULL,
        'media_id' => NULL,
        'profile_meta__image_orientation' => NULL,
        'profile_meta__image_style' => NULL,
        'profile_meta__image_alignment' => NULL,
      ],
    ],
    'ys_profile_contact_block' => [
      'variables' => [
        'email' => NULL,
        'phone' => NULL,
        'address' => [],
      ],
    ],
    'ys_taxonomy_display_block' => [
      'variables' => [
        'items' => [],
        'theme_selection' => NULL,
      ],
    ],
  ];
}

/**
 * Allows reusable blocks to use the same template as inline blocks.
 *
 * Implements hook_theme_suggestions_block().
 */
function ys_layouts_theme_suggestions_block($variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    return [
      'block__inline_block__' . $variables['elements']['content']['#block_content']->bundle(),
    ];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ys_layouts_preprocess_block(&$variables) {
  // Sets variable if block is reusable for layout builder preview for styling.
  if ($variables['in_preview'] && isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->isReusable()) {
      $variables['is_reusable'] = TRUE;
    }
  }

  // Add layout_section variable for styling.
  if (!empty($variables['elements']['#configuration']['provider']) && $variables['elements']['#configuration']['provider'] === 'layout_builder') {
    _ys_layouts_add_layout_section($variables);
  }
}

/**
 * Implements hook_form_alter().
 */
function ys_layouts_form_alter(&$form, $form_state, $form_id) {

  // Updates the title and help text of reusable blocks.
  if ($form_id == 'layout_builder_update_block' || $form_id == 'layout_builder_add_block') {
    if (isset($form['reusable'])) {
      $form['reusable']['#title'] = t('Reusable Block');
      $form['reusable']['#description'] = t('Create reusable content with Reusable Blocks. Changes made to a Reusable Blockâ€™s content are reflected anywhere the Block is used. This setting cannot be changed after saving.');

      $form['info']['#title'] = t('Reusable Block title');
      $form['info']['#description'] = t('Add a short, descriptive title to easily find and reuse the Reusable Block. Defaults to Administrative label if no title is provided.');
    }
  }
}

/**
 * Adds layout section information to block variables for styling purposes.
 *
 * This function determines which Layout Builder section a block belongs to
 * and adds the layout ID as a variable. This enables section-specific styling
 * in templates, particularly for components that need to adapt their
 * appearance based on their layout context.
 *
 * Currently used by:
 * - Link grid component template
 * - atomic/templates/block/layout-builder/block--inline-block--link-grid.html.twig
 *
 * The function handles two contexts:
 * 1. Preview mode (Layout Builder edit interface): Uses contextual links delta
 * 2. Live view: Searches through section storage to find the block's section
 *
 * @param array &$variables
 *   Template variables array passed by reference. The 'layout_section' key
 *   will be added with the layout ID or NULL if not found.
 */
function _ys_layouts_add_layout_section(array &$variables): void {
  $variables['layout_section'] = NULL;
  $block_id = NULL;

  // Handle preview mode (Layout Builder edit interface).
  if ($variables['in_preview']) {
    // In preview mode, we can get section info directly from contextual links.
    if (isset($variables['elements']['#contextual_links'])) {
      $delta = $variables['elements']['#contextual_links']['layout_builder_block']['route_parameters']['delta'];
      $route_match = \Drupal::routeMatch();
      $section_storage = $route_match->getParameter('section_storage');
      $section = $section_storage->getSection($delta);
      $variables['layout_section'] = $section->getLayoutId();
      return;
    }
  }
  else {
    // Handle live view (front-end display).
    if (isset($variables['elements']['content']['#block_content'])) {
      $block_id = $variables['configuration']['block_id'];
    }

    // In live view, we must search through section storage to find our block.
    // This is necessary because blocks don't inherently know their section
    // context.
    $route_match = \Drupal::routeMatch();
    $entity = $route_match->getParameter('node') ?? $route_match->getParameter('entity');

    // Prevent errors during site builds or when entity is unavailable.
    if (!$entity || !$entity instanceof EntityInterface) {
      return;
    }

    // Create section storage to access Layout Builder data for this entity.
    $context = new Context(new EntityContextDefinition($entity->getEntityTypeId()), $entity);
    $section_storage_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
    $section_storage = $section_storage_manager->createInstance('overrides');
    $section_storage->setContext('entity', $context);

    // Search through all sections and components to find our block.
    if ($section_storage && $block_id) {
      foreach ($section_storage->getSections() as $delta => $section) {
        foreach ($section->getComponents() as $component) {
          if (isset($component->get('configuration')['block_id']) && $component->get('configuration')['block_id'] === $block_id) {
            $variables['layout_section'] = $section->getLayoutId();
            // Exit both foreach loops when found.
            break 2;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_layouts_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add padding options to the section config form.
  $form_object = $form_state->getFormObject();
  $config = $form_object->getCurrentLayout()->getConfiguration();

  $form['padding_options'] = [
    '#type' => 'select',
    '#title' => t('Section padding options'),
    '#options' => [
      'default' => t('Default'),
      'no_top' => t('No top padding'),
      'no_bottom' => t('No bottom padding'),
      'no_padding' => t('No padding (top and bottom)'),
    ],
    '#default_value' => $config['ys_layouts_sections_config']['padding_options'] ?? 'default',
    '#description' => t("To create connected sections, use 'No bottom padding' on the first section and 'No top padding' on the section below it. Default padding maintains standard spacing for optimal readability."),
    '#weight' => 0,
    '#wrapper_attributes' => [
      'class' => ['glb-canvas-form__settings'],
    ],
  ];

  // Add our submit handler to the form.
  array_unshift($form['#submit'], '_ys_layouts_sections_config_submit_form');

}

/**
 * Custom submit handler for Layout Builder section configuration form.
 *
 * This handler processes the custom padding options added to Layout Builder
 * sections and stores them in the layout configuration. The padding options
 * allow editors to control section spacing for connected layouts.
 *
 * Available padding options:
 * - 'default': Standard top/bottom padding
 * - 'no_top': Removes top padding only
 * - 'no_bottom': Removes bottom padding only
 * - 'no_padding': Removes both top and bottom padding
 *
 * The configuration is stored in the layout's configuration under the
 * 'ys_layouts_sections_config' key and later processed in the layout
 * preprocess function.
 *
 * @param array $form
 *   The complete form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form, containing user input values.
 *
 * @see ys_layouts_form_layout_builder_configure_section_alter()
 * @see ys_layouts_preprocess_layout()
 */
function _ys_layouts_sections_config_submit_form(array $form, FormStateInterface $form_state): void {
  $form_object = $form_state->getFormObject();
  $config = $form_object->getCurrentLayout()->getConfiguration();
  if (!$config) {
    $config = [];
  }
  $config['ys_layouts_sections_config'] = [
    'padding_options' => $form_state->getValue('padding_options'),
  ];

  $form_object
    ->getCurrentLayout()
    ->setConfiguration($config);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ys_layouts_preprocess_layout(&$variables) {
  // Add the Layout Builder section configuration to the $variables.
  if (isset($variables['settings']['ys_layouts_sections_config'])) {
    $config = $variables['settings']['ys_layouts_sections_config'];

    if (isset($config['padding_options']) && $config['padding_options']) {
      // Replace underscores with hyphens.
      $padding_options = str_replace('_', '-', $config['padding_options']);
      $variables['settings']['padding'] = $padding_options;
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Attaches the Layout Builder sidebar customization library and context
 * information to specific Layout Builder routes.
 *
 * DEPENDENCY RISK: This function relies on specific route names that could
 * change in future Drupal core updates:
 * - 'entity.node.edit_form' (Manage Settings interface)
 * - 'layout_builder.overrides.node.view' (Edit Layout interface)
 *
 * If these route names change, the sidebar customizations will not load.
 * The Gin admin theme CSS selectors used in layout-builder-sidebar.css
 * could also break if Gin's markup structure changes.
 */
function ys_layouts_page_attachments_alter(array &$attachments): void {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();

  // Define the Layout Builder routes we want to target.
  $layout_builder_routes = [
    // Manage Settings interface: /node/{node}/edit.
    'entity.node.edit_form',
    // Edit Layout and Content interface: /node/{node}/layout.
    'layout_builder.overrides.node.view',
  ];

  // Only attach library on Layout Builder routes.
  if (in_array($route_name, $layout_builder_routes)) {
    // Attach our custom sidebar library.
    $attachments['#attached']['library'][] = 'ys_layouts/layout_builder_sidebar';

    // Map route to JavaScript context for sidebar behavior.
    // 'manageSettings' = hide cogwheel, always show sidebar
    // 'editLayout' = show cogwheel, allow toggle, separate state.
    $context = ($route_name === 'entity.node.edit_form') ? 'manageSettings' : 'editLayout';

    // Pass context information to JavaScript via drupalSettings.
    $attachments['#attached']['drupalSettings']['ysLayouts']['context'] = $context;
  }
}
