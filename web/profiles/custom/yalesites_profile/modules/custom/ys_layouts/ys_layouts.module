<?php

/**
 * @file
 * Contains ys_layouts.module functions.
 */

/**
 * Add template files.
 *
 * Implements hook_theme().
 */
function ys_layouts_theme($existing, $type, $theme, $path): array {
  return [
    'ys_event_meta_block' => [
      'variables' => [
        'event_title__heading' => NULL,
        'event_dates' => [],
        'ics_url' => NULL,
        'canonical_url' => NULL,
        'ticket_url' => NULL,
        'ticket_cost' => NULL,
        'place' => [],
        'event_types' => [],
        'event_audience' => [],
        'event_topics' => [],
        'description' => NULL,
        'event_meta__cta_primary__href' => NULL,
        'event_meta__cta_primary__content' => NULL,
        'event_experience' => NULL,
        'localist_image_url' => NULL,
        'localist_image_alt' => NULL,
        'teaser_media' => [],
        'has_register' => NULL,
        'cost_button_text' => 'Register',
        'localist_url' => NULL,
        'stream_url' => NULL,
        'stream_embed_code' => NULL,
      ],
    ],
    'ys_page_meta_block' => [
      'variables' => [
        'page_title' => NULL,
        'page_title_display' => 'visible',
      ],
    ],
    'ys_post_meta_block' => [
      'variables' => [
        'label' => NULL,
        'author' => NULL,
        'date_formatted' => NULL,
      ],
    ],
    'ys_profile_meta_block' => [
      'variables' => [
        'profile_meta__heading' => NULL,
        'profile_meta__title_line' => NULL,
        'profile_meta__subtitle_line' => NULL,
        'profile_meta__department' => NULL,
        'media_id' => NULL,
        'profile_meta__image_orientation' => NULL,
        'profile_meta__image_style' => NULL,
        'profile_meta__image_alignment' => NULL,
      ],
    ],
    'ys_profile_contact_block' => [
      'variables' => [
        'email' => NULL,
        'phone' => NULL,
        'address' => [],
      ],
    ],
  ];
}

/**
 * Allows reusable blocks to use the same template as inline blocks.
 *
 * Implements hook_theme_suggestions_block().
 */
function ys_layouts_theme_suggestions_block($variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    return [
      'block__inline_block__' . $variables['elements']['content']['#block_content']->bundle(),
    ];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ys_layouts_preprocess_block(&$variables) {
  // Sets variable if block is reusable for layout builder preview for styling.
  if ($variables['in_preview'] && isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->isReusable()) {
      $variables['is_reusable'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ys_layouts_form_alter(&$form, $form_state, $form_id) {

  // Updates the title and help text of reusable blocks.
  if ($form_id == 'layout_builder_update_block' || $form_id == 'layout_builder_add_block') {
    if (isset($form['reusable'])) {
      $form['reusable']['#title'] = t('Reusable Block');
      $form['reusable']['#description'] = t('Create reusable content with Reusable Blocks. Changes made to a Reusable Blockâ€™s content are reflected anywhere the Block is used. This setting cannot be changed after saving.');

      $form['info']['#title'] = t('Reusable Block title');
      $form['info']['#description'] = t('Add a short, descriptive title to easily find and reuse the Reusable Block. Defaults to Administrative label if no title is provided.');
    }
  }

}
