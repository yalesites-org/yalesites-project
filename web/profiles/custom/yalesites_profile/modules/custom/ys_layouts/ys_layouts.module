<?php

/**
 * @file
 * Contains ys_layouts.module functions.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Plugin\Context\Context;
use Drupal\Core\Plugin\Context\EntityContextDefinition;

/**
 * Add template files.
 *
 * Implements hook_theme().
 */
function ys_layouts_theme($existing, $type, $theme, $path): array {
  return [
    'ys_event_meta_block' => [
      'variables' => [
        'event_title__heading' => NULL,
        'event_dates' => [],
        'ics_url' => NULL,
        'canonical_url' => NULL,
        'ticket_url' => NULL,
        'ticket_cost' => NULL,
        'place' => [],
        'event_types' => [],
        'event_audience' => [],
        'event_topics' => [],
        'description' => NULL,
        'event_meta__cta_primary__href' => NULL,
        'event_meta__cta_primary__content' => NULL,
        'event_experience' => NULL,
        'localist_image_url' => NULL,
        'localist_image_alt' => NULL,
        'teaser_media' => [],
        'has_register' => NULL,
        'cost_button_text' => 'Register',
        'localist_url' => NULL,
        'stream_url' => NULL,
        'stream_embed_code' => NULL,
      ],
    ],
    'ys_page_meta_block' => [
      'variables' => [
        'page_title' => NULL,
        'page_title_display' => 'visible',
      ],
    ],
    'ys_post_meta_block' => [
      'variables' => [
        'label' => NULL,
        'author' => NULL,
        'date_formatted' => NULL,
        'hide_sharing' => NULL,
      ],
    ],
    'ys_profile_meta_block' => [
      'variables' => [
        'profile_meta__heading' => NULL,
        'profile_meta__title_line' => NULL,
        'profile_meta__subtitle_line' => NULL,
        'profile_meta__department' => NULL,
        'profile_meta__pronouns' => NULL,
        'media_id' => NULL,
        'profile_meta__image_orientation' => NULL,
        'profile_meta__image_style' => NULL,
        'profile_meta__image_alignment' => NULL,
      ],
    ],
    'ys_profile_contact_block' => [
      'variables' => [
        'email' => NULL,
        'phone' => NULL,
        'address' => [],
      ],
    ],
  ];
}

/**
 * Allows reusable blocks to use the same template as inline blocks.
 *
 * Implements hook_theme_suggestions_block().
 */
function ys_layouts_theme_suggestions_block($variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    return [
      'block__inline_block__' . $variables['elements']['content']['#block_content']->bundle(),
    ];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ys_layouts_preprocess_block(&$variables) {
  // Sets variable if block is reusable for layout builder preview for styling.
  if ($variables['in_preview'] && isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->isReusable()) {
      $variables['is_reusable'] = TRUE;
    }
  }

  // Add layout_section variable for styling.
  if (!empty($variables['elements']['#configuration']['provider']) && $variables['elements']['#configuration']['provider'] === 'layout_builder') {
    _ys_layouts_add_layout_section($variables);
  }
}

/**
 * Implements hook_form_alter().
 */
function ys_layouts_form_alter(&$form, $form_state, $form_id) {

  // Updates the title and help text of reusable blocks.
  if ($form_id == 'layout_builder_update_block' || $form_id == 'layout_builder_add_block') {
    if (isset($form['reusable'])) {
      $form['reusable']['#title'] = t('Reusable Block');
      $form['reusable']['#description'] = t('Create reusable content with Reusable Blocks. Changes made to a Reusable Blockâ€™s content are reflected anywhere the Block is used. This setting cannot be changed after saving.');

      $form['info']['#title'] = t('Reusable Block title');
      $form['info']['#description'] = t('Add a short, descriptive title to easily find and reuse the Reusable Block. Defaults to Administrative label if no title is provided.');
    }
  }
}

/**
 * To aids in styling per section, set layout_section if using layout builder.
 *
 * For now this is only used with the link grid component:
 * atomic/templates/block/layout-builder/block--inline-block--link-grid.html.twig.
 */
function _ys_layouts_add_layout_section(&$variables) {
  $variables['layout_section'] = NULL;
  $block_id = NULL;

  // Different methods for in layout builder vs not.
  if ($variables['in_preview']) {
    if (isset($variables['elements']['#contextual_links'])) {
      $delta = $variables['elements']['#contextual_links']['layout_builder_block']['route_parameters']['delta'];
      $route_match = \Drupal::routeMatch();
      $section_storage = $route_match->getParameter('section_storage');
      $section = $section_storage->getSection($delta);
      $variables['layout_section'] = $section->getLayoutId();
      return;
    }
  }
  else {
    if (isset($variables['elements']['content']['#block_content'])) {
      $block_id = $variables['configuration']['block_id'];
    }
    // Because we can't seem to get layout builder section info via the block.
    $route_match = \Drupal::routeMatch();
    $entity = $route_match->getParameter('node') ?? $route_match->getParameter('entity');

    // Prevents errors during build.
    if (!$entity || !$entity instanceof EntityInterface) {
      return;
    }

    $context = new Context(new EntityContextDefinition($entity->getEntityTypeId()), $entity);
    $section_storage_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
    $section_storage = $section_storage_manager->createInstance('overrides');
    $section_storage->setContext('entity', $context);

    if ($section_storage && $block_id) {
      foreach ($section_storage->getSections() as $delta => $section) {
        foreach ($section->getComponents() as $component) {
          if (isset($component->get('configuration')['block_id']) && $component->get('configuration')['block_id'] === $block_id) {
            $variables['layout_section'] = $section->getLayoutId();
            break 2;
          }
        }
      }
    }
  }
}
