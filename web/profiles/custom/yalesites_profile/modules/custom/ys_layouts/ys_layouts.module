<?php

/**
 * @file
 * Contains ys_layouts.module functions.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\Context\Context;
use Drupal\Core\Plugin\Context\EntityContextDefinition;

/**
 * Add template files.
 *
 * Implements hook_theme().
 */
function ys_layouts_theme($existing, $type, $theme, $path): array {
  return [
    'ys_event_meta_block' => [
      'variables' => [
        'event_title__heading' => NULL,
        'event_dates' => [],
        'ics_url' => NULL,
        'canonical_url' => NULL,
        'ticket_url' => NULL,
        'ticket_cost' => NULL,
        'place' => [],
        'event_types' => [],
        'event_audience' => [],
        'event_topics' => [],
        'description' => NULL,
        'event_meta__cta_primary__href' => NULL,
        'event_meta__cta_primary__content' => NULL,
        'event_experience' => NULL,
        'localist_image_url' => NULL,
        'localist_image_alt' => NULL,
        'teaser_media' => [],
        'has_register' => NULL,
        'cost_button_text' => 'Register',
        'localist_url' => NULL,
        'stream_url' => NULL,
        'stream_embed_code' => NULL,
        'event_source' => NULL,
        'event_id' => NULL,
        'event_featured_date' => NULL,
      ],
    ],
    'ys_page_meta_block' => [
      'variables' => [
        'page_title' => NULL,
        'page_title_display' => 'visible',
      ],
    ],
    'ys_post_meta_block' => [
      'variables' => [
        'label' => NULL,
        'author' => NULL,
        'date_formatted' => NULL,
        'show_read_time' => NULL,
        'show_social_media_sharing_links' => NULL,
        'post_authors' => NULL,
      ],
    ],
    'ys_profile_meta_block' => [
      'variables' => [
        'profile_meta__heading' => NULL,
        'profile_meta__title_line' => NULL,
        'profile_meta__subtitle_line' => NULL,
        'profile_meta__department' => NULL,
        'profile_meta__pronouns' => NULL,
        'media_id' => NULL,
        'profile_meta__image_orientation' => NULL,
        'profile_meta__image_style' => NULL,
        'profile_meta__image_alignment' => NULL,
      ],
    ],
    'ys_profile_contact_block' => [
      'variables' => [
        'email' => NULL,
        'phone' => NULL,
        'address' => [],
      ],
    ],
    'ys_taxonomy_display_block' => [
      'variables' => [
        'items' => [],
        'theme_selection' => NULL,
      ],
    ],
  ];
}

/**
 * Allows reusable blocks to use the same template as inline blocks.
 *
 * Implements hook_theme_suggestions_block().
 */
function ys_layouts_theme_suggestions_block($variables) {
  if (isset($variables['elements']['content']['#block_content'])) {
    return [
      'block__inline_block__' . $variables['elements']['content']['#block_content']->bundle(),
    ];
  }
}

/**
 * Implements hook_preprocess_block().
 */
function ys_layouts_preprocess_block(&$variables) {
  // Sets variable if block is reusable for layout builder preview for styling.
  if ($variables['in_preview'] && isset($variables['content']['#block_content'])) {
    if ($variables['content']['#block_content']->isReusable()) {
      $variables['is_reusable'] = TRUE;
    }
  }

  // Add layout_section variable for styling.
  if (!empty($variables['elements']['#configuration']['provider']) && $variables['elements']['#configuration']['provider'] === 'layout_builder') {
    _ys_layouts_add_layout_section($variables);
  }
}

/**
 * Implements hook_form_alter().
 */
function ys_layouts_form_alter(&$form, $form_state, $form_id) {

  // Updates the title and help text of reusable blocks.
  if ($form_id == 'layout_builder_update_block' || $form_id == 'layout_builder_add_block') {
    if (isset($form['reusable'])) {
      $form['reusable']['#title'] = t('Reusable Block');
      $form['reusable']['#description'] = t("Create reusable content with Reusable Blocks. Changes made to a Reusable Block's content are reflected anywhere the Block is used. This setting cannot be changed after saving.");

      $form['info']['#title'] = t('Reusable Block title');
      $form['info']['#description'] = t('Add a short, descriptive title to easily find and reuse the Reusable Block. Defaults to Administrative label if no title is provided.');
    }
  }

  // Target Layout Builder block configuration forms to preserve tabs.
  if ($form_id === 'layout_builder_configure_block' ||
      (isset($form['#base_form_id']) &&
       $form['#base_form_id'] === 'layout_builder_configure_block')) {

    // Add validation handlers to maintain modal context during errors.
    array_unshift($form['#validate'], 'ys_layouts_prepare_validation_context');
    $form['#validate'][] = 'ys_layouts_preserve_field_group_context';
  }
}

/**
 * To aids in styling per section, set layout_section if using layout builder.
 *
 * For now this is only used with the link grid component:
 * atomic/templates/block/layout-builder/block--inline-block--link-grid.html.twig.
 */
function _ys_layouts_add_layout_section(&$variables) {
  $variables['layout_section'] = NULL;
  $block_id = NULL;

  // Different methods for in layout builder vs not.
  if ($variables['in_preview']) {
    if (isset($variables['elements']['#contextual_links'])) {
      $delta = $variables['elements']['#contextual_links']['layout_builder_block']['route_parameters']['delta'];
      $route_match = \Drupal::routeMatch();
      $section_storage = $route_match->getParameter('section_storage');
      $section = $section_storage->getSection($delta);
      $variables['layout_section'] = $section->getLayoutId();
      return;
    }
  }
  else {
    if (isset($variables['elements']['content']['#block_content'])) {
      $block_id = $variables['configuration']['block_id'];
    }
    // Because we can't seem to get layout builder section info via the block.
    $route_match = \Drupal::routeMatch();
    $entity = $route_match->getParameter('node') ?? $route_match->getParameter('entity');

    // Prevents errors during build.
    if (!$entity || !$entity instanceof EntityInterface) {
      return;
    }

    $context = new Context(new EntityContextDefinition($entity->getEntityTypeId()), $entity);
    $section_storage_manager = \Drupal::service('plugin.manager.layout_builder.section_storage');
    $section_storage = $section_storage_manager->createInstance('overrides');
    $section_storage->setContext('entity', $context);

    if ($section_storage && $block_id) {
      foreach ($section_storage->getSections() as $delta => $section) {
        foreach ($section->getComponents() as $component) {
          if (isset($component->get('configuration')['block_id']) && $component->get('configuration')['block_id'] === $block_id) {
            $variables['layout_section'] = $section->getLayoutId();
            break 2;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ys_layouts_form_layout_builder_configure_section_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Add padding options to the section config form.
  $form_object = $form_state->getFormObject();
  $config = $form_object->getCurrentLayout()->getConfiguration();

  $form['padding_options'] = [
    '#type' => 'select',
    '#title' => t('Section padding options'),
    '#options' => [
      'default' => t('Default'),
      'no_top' => t('No top padding'),
      'no_bottom' => t('No bottom padding'),
      'no_padding' => t('No padding (top and bottom)'),
    ],
    '#default_value' => $config['ys_layouts_sections_config']['padding_options'] ?? 'default',
    '#description' => t("To create connected sections, use 'No bottom padding' on the first section and 'No top padding' on the section below it. Default padding maintains standard spacing for optimal readability."),
    '#weight' => 0,
    '#wrapper_attributes' => [
      'class' => ['glb-canvas-form__settings'],
    ],
  ];

  // Add our submit handler to the form.
  array_unshift($form['#submit'], '_ys_layouts_sections_config_submit_form');

}

/**
 * Custom submit handler for submitting layout builder section config form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function _ys_layouts_sections_config_submit_form($form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  $config = $form_object->getCurrentLayout()->getConfiguration();
  if (!$config) {
    $config = [];
  }
  $config['ys_layouts_sections_config'] = [
    'padding_options' => $form_state->getValue('padding_options'),
  ];

  $form_object
    ->getCurrentLayout()
    ->setConfiguration($config);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function ys_layouts_preprocess_layout(&$variables) {
  // Add the Layout Builder section configuration to the $variables.
  if (isset($variables['settings']['ys_layouts_sections_config'])) {
    $config = $variables['settings']['ys_layouts_sections_config'];

    if (isset($config['padding_options']) && $config['padding_options']) {
      // Replace underscores with hyphens.
      $padding_options = str_replace('_', '-', $config['padding_options']);
      $variables['settings']['padding'] = $padding_options;
    }
  }
}

/**
 * Prepare validation context for Layout Builder block forms.
 *
 * This validation handler stores the current form state context before
 * validation occurs, allowing us to preserve modal context and Field Group
 * tabs when validation errors are present.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function ys_layouts_prepare_validation_context(array &$form, FormStateInterface $form_state) {
  // Store relevant form context data to preserve during validation errors.
  $context_data = [
    'form_id' => $form_state->getFormObject()->getFormId(),
    'form_display_id' => $form_state->get('form_display'),
    'layout_builder_modal' => TRUE,
    'preserve_field_groups' => TRUE,
  ];

  // Store context in form state for later retrieval.
  $form_state->set('ys_layouts_validation_context', $context_data);
}

/**
 * Preserve Field Group context during Layout Builder validation errors.
 *
 * This validation handler ensures that Field Group tabs and modal context
 * are maintained when validation errors occur in Layout Builder block forms,
 * preventing users from being redirected out of the tabbed interface.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 */
function ys_layouts_preserve_field_group_context(array &$form, FormStateInterface $form_state) {
  // Only act if there are validation errors.
  if (!$form_state->getErrors()) {
    return;
  }

  // Retrieve stored validation context.
  $context_data = $form_state->get('ys_layouts_validation_context');
  if (!$context_data) {
    return;
  }

  // Ensure Field Group processing is maintained during validation errors.
  if (!empty($context_data['preserve_field_groups'])) {
    // Re-process field groups to maintain tab structure.
    $form_display = $form_state->get('form_display');
    if ($form_display) {
      // Trigger field group processing again to restore tab structure.
      \Drupal::moduleHandler()->alter('form', $form, $form_state, $form_state->getFormObject()->getFormId());
    }

    // Maintain modal context by ensuring proper form rebuild attributes.
    if (!empty($context_data['layout_builder_modal'])) {
      $form_state->setRebuild(TRUE);
      $form_state->set('layout_builder_modal_preserved', TRUE);

      // Add attributes to help maintain modal state in the frontend.
      if (!isset($form['#attributes'])) {
        $form['#attributes'] = [];
      }
      $form['#attributes']['data-layout-builder-modal'] = 'preserved';
    }
  }
}
