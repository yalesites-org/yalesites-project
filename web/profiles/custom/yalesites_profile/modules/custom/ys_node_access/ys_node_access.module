<?php

/**
 * @file
 * Contains ys_node_access.module functions.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\menu_item_extras\Entity\MenuItemExtrasMenuLinkContent;
use Drupal\ys_node_access\NodeAccessManager;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_node_grants().
 */
function ys_node_access_node_grants($account, $op) {

  $nodeAccessManager = new NodeAccessManager();

  // Only set grants for viewing a node.
  if ($op == 'view') {
    if (in_array(AccountInterface::AUTHENTICATED_ROLE, $account->getRoles())) {
      // Set grants for authenticated users.
      $grants[$nodeAccessManager::YS_NODE_ACCESS_REALM] = [
        $nodeAccessManager::YS_NODE_ACCESS_GRANT_ID_PUBLIC,
        $nodeAccessManager::YS_NODE_ACCESS_GRANT_ID_PRIVATE,
      ];
    }
    else {
      // Set grants for anonymous users.
      $grants[$nodeAccessManager::YS_NODE_ACCESS_REALM] = [
        $nodeAccessManager::YS_NODE_ACCESS_GRANT_ID_PUBLIC,
      ];
    }

    return $grants;
  }
}

/**
 * Implements hook_node_access_records().
 */
function ys_node_access_node_access_records($node) {

  $private = FALSE;

  $nodeAccessManager = new NodeAccessManager();
  // Saving a node, check login required field to set the appropriate grants.
  if ($node->hasField('field_login_required')) {
    if ($node->get('field_login_required')->getValue()[0]['value'] == 1 || !$node->isPublished()) {
      $private = TRUE;
    }
    else {
      $private = FALSE;
    }
  }

  // Update the node_access table for this node with the correct grants.
  if ($private) {
    $grants[] = [
      'realm' => $nodeAccessManager::YS_NODE_ACCESS_REALM,
      'gid' => $nodeAccessManager::YS_NODE_ACCESS_GRANT_ID_PRIVATE,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];
  }
  else {
    $grants[] = [
      'realm' => $nodeAccessManager::YS_NODE_ACCESS_REALM,
      'gid' => $nodeAccessManager::YS_NODE_ACCESS_GRANT_ID_PUBLIC,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    ];
  }

  return $grants;
}

/**
 * Implements hook_preprocess_menu().
 */
function ys_node_access_preprocess_menu(array &$variables) {
  /*
   * Adds data attribute to menu links that are CAS only.
   * @see ys_node_access/src/Menu/YsNodeAccessLinkTreeManipulator.php
   */
  $config = \Drupal::config('ys_core.header_settings');
  if ($config->get('enable_cas_menu_links') && in_array($variables['menu_name'], _ys_node_access_cas_menus())) {
    _ys_node_access_cas_menu_attribute($variables['items']);
  }

}

/**
 * Adds is_cas attribute to menu items and sub-menu items.
 */
function _ys_node_access_cas_menu_attribute(&$items) {
  foreach ($items as &$item) {
    if (isset($item['entity']) && $item['entity'] instanceof MenuItemExtrasMenuLinkContent && $item['entity']->data_restricted) {
      $item['is_cas'] = TRUE;
    }
    if (!empty($item['below'])) {
      _ys_node_access_cas_menu_attribute($item['below']);
    }
  }
}

/**
 * Returns a reusable array of menu ids to check CAS access for links.
 */
function _ys_node_access_cas_menus() {
  $menusToCheck = [
    'main',
    'utility-navigation',
  ];

  return $menusToCheck;
}

/**
 * Implements hook_form_alter().
 */
function ys_node_access_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Add CAS protection modal to node edit/add forms that have the 
  // field_login_required field.
  if (preg_match('/^node_.*_(form|edit_form)$/', $form_id)) {
    $form_object = $form_state->getFormObject();
    if (method_exists($form_object, 'getEntity')) {
      $entity = $form_object->getEntity();
      if ($entity->hasField('field_login_required')) {
        // Attach the modal library.
        $form['#attached']['library'][] = 'ys_node_access/cas_protection_modal';

        // Add validation for the field to handle modal confirmation.
        $form['#validate'][] = 'ys_node_access_cas_protection_validate';
      }
    }
  }
}

/**
 * Validation callback for CAS protection field changes.
 */
function ys_node_access_cas_protection_validate($form, FormStateInterface $form_state) {
  // This validation allows the form to continue processing
  // The actual modal confirmation is handled by JavaScript
  // If JavaScript is disabled, the form will still work without modal.
}
